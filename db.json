{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/ray/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/ray/source/weixin_favicon.png","path":"weixin_favicon.png","modified":0,"renderable":1},{"_id":"source/img/about/h.jpg","path":"img/about/h.jpg","modified":0,"renderable":0},{"_id":"source/img/project/A.png","path":"img/project/A.png","modified":0,"renderable":0},{"_id":"source/img/project/B.png","path":"img/project/B.png","modified":0,"renderable":0},{"_id":"themes/ray/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/ray/source/js/prettify.js","path":"js/prettify.js","modified":0,"renderable":1},{"_id":"themes/ray/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/about/zfbsk.png","path":"img/about/zfbsk.png","modified":0,"renderable":0},{"_id":"source/img/about/wxsk.png","path":"img/about/wxsk.png","modified":0,"renderable":0},{"_id":"themes/ray/source/css/images/side-user-cover.jpg","path":"css/images/side-user-cover.jpg","modified":0,"renderable":1},{"_id":"themes/ray/source/css/lib/font-awesome.min.css","path":"css/lib/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/ray/source/css/lib/prettify-tomorrow-night-eighties.css","path":"css/lib/prettify-tomorrow-night-eighties.css","modified":0,"renderable":1},{"_id":"themes/ray/source/js/materialize.min.js","path":"js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/ray/source/css/lib/materialize.min.css","path":"css/lib/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/ray/source/css/lib/materialize.min.css.bak","path":"css/lib/materialize.min.css.bak","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.eot","path":"css/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.woff2","path":"css/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.woff","path":"css/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.eot","path":"css/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.woff","path":"css/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.woff2","path":"css/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.eot","path":"css/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.woff","path":"css/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.woff2","path":"css/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.eot","path":"css/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.woff2","path":"css/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.woff","path":"css/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.woff","path":"css/font/font-awesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.woff2","path":"css/font/font-awesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.eot","path":"css/font/font-awesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/font-awesome/FontAwesome.otf","path":"css/font/font-awesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.ttf","path":"css/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.ttf","path":"css/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.ttf","path":"css/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.ttf","path":"css/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.ttf","path":"css/font/font-awesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.svg","path":"css/font/font-awesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f0de6ffa9ebdb0edf49477e29dc03a4b21b51702","modified":1471951788736},{"_id":"themes/ray/.gitignore","hash":"3ba1b7b4baceca12575cc0f212e13a504af994a7","modified":1465955180000},{"_id":"themes/ray/README.md","hash":"37e421f39caf0a311bc7a97ef390f19b70c8a02f","modified":1471511525396},{"_id":"themes/ray/LICENSE","hash":"391dd84c2091363936603d63cc71ba1628a13c86","modified":1465955180000},{"_id":"themes/ray/README.md.bak","hash":"a735eb161fb07a950a4b4b87109915b6b37a114b","modified":1465955180000},{"_id":"themes/ray/_config.yml.bak","hash":"414da81989dd7fbad9f15a6fcee6d32d11cf5e9e","modified":1473150925769},{"_id":"themes/ray/_config.yml","hash":"05dfc9858112560f927fa8bfe5dc37815bcdbae6","modified":1473327063633},{"_id":"themes/ray/log.md","hash":"e6b93891f941c723524b143b69b0d303064db54b","modified":1465955180000},{"_id":"themes/ray/Gruntfile.js","hash":"f0c204fc7b3343417cc1a0fdca12ab089394b654","modified":1465955180000},{"_id":"source/_data/slider.json~","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1472812144896},{"_id":"source/_data/about.json.bak","hash":"512cf4f1e89edbd7566ba8d171a3280be36f5692","modified":1472808282977},{"_id":"source/_data/about.json","hash":"ab49b38b3f6efc085ef9f6dc875e032d5c87f4cd","modified":1473318656425},{"_id":"source/_data/hint.json","hash":"1ab2b16bd2aab07be1213410f07d2881e223085a","modified":1471938310928},{"_id":"source/_data/hint.json.bak","hash":"f71b0265c6460d875bb61443ce9ae4b1c151a1ff","modified":1471426304209},{"_id":"source/_data/link.json.bak","hash":"655c80a7ba0f783958c24c6ba00a32f1bb543e43","modified":1471509036237},{"_id":"source/_data/reading.json","hash":"e8045e22b2d499a5d813320a8c2b1bccdbedd46d","modified":1465955180000},{"_id":"source/_data/link.json~","hash":"b865125d0440e6717ee3d88d1b518a4ebdb32d61","modified":1471509037538},{"_id":"source/_data/slider.json.bak","hash":"e82cae0f94c0a00c4ec94ec4a2c6181a732687e2","modified":1472797693092},{"_id":"source/_posts/hexo_next.md","hash":"28c04c220031ef58ae577bb95b5150dcf81e4c33","modified":1473329069262},{"_id":"source/_posts/hexo入门.md","hash":"84b501edaf2b83bd0657046a47ec10286367e11a","modified":1473157853580},{"_id":"source/_posts/java_sort.md","hash":"b525d98c9c08e8e95f77c897cd99e8bf9a125420","modified":1473330910370},{"_id":"source/_data/slider.json~.bak","hash":"f56f6eeb29c335bed5eafe32712c17d2bdcc2f38","modified":1472807110877},{"_id":"source/_posts/linux-dns.md","hash":"531365f4fdccb0dd4dbbd5141ab0c0ab96b6f805","modified":1473320460626},{"_id":"source/about/index.md","hash":"001e1eb62b7128b22c0ea2c336133345a2dd09d2","modified":1471946142318},{"_id":"source/board/index.md","hash":"ac2c926e2f98e13b2c33b2f6a6b7c6a05dd77212","modified":1473323636134},{"_id":"source/reading/index.md","hash":"ffe64363f79a74ca022f15447a03a96808c64794","modified":1465955180000},{"_id":"themes/ray/languages/default.yml","hash":"1edc787d80be4c87e7cd94554da7c811295ab369","modified":1465955180000},{"_id":"themes/ray/languages/zh-CN.yml.bak","hash":"ccb2779b06e826bb22c99da888d81676034d6d61","modified":1472813322636},{"_id":"themes/ray/languages/zh-CN.yml","hash":"f6b58c436efa684ef7cac7dc060279dffa4f6593","modified":1473329288372},{"_id":"themes/ray/languages/zh-TW.yml","hash":"b3c05b36011e938204b89e48864b5c4e656816bc","modified":1465955180000},{"_id":"themes/ray/layout/about.ejs","hash":"54e74d61dba41f173f111e32deeb58447260f0e3","modified":1465955180000},{"_id":"themes/ray/layout/archive.ejs","hash":"0a21af8903e95c6d8bb7554b089ac219e8708ad7","modified":1465955180000},{"_id":"themes/ray/layout/index.ejs","hash":"34cbcb6c75e2eef622fea6fecebfe15fb7522a95","modified":1465955180000},{"_id":"themes/ray/layout/layout.ejs","hash":"0fbced6bf0129f550ad66d57735d269b70728b49","modified":1465955180000},{"_id":"themes/ray/layout/page.ejs","hash":"90441f114859ce63ef7c7d93d668dbe5939995c2","modified":1465955180000},{"_id":"themes/ray/layout/reading.ejs","hash":"8ff2e67f23d265dbbf07db26bce6277ba72d8511","modified":1465955180000},{"_id":"themes/ray/layout/post.ejs","hash":"8e550fd95ef761909294ed3a4aa428ff0509fbf0","modified":1465955180000},{"_id":"themes/ray/layout/tag.ejs","hash":"42ecab14917abd40c0a38e6ab629f089352a24b1","modified":1465955180000},{"_id":"themes/ray/source/favicon.png","hash":"54af2e6bc39c64a2c87a84806a89188eb8cc65d8","modified":1472810205127},{"_id":"themes/ray/source/weixin_favicon.png","hash":"4e287dd2c6324fac39c54efa75b4e7f654e543d3","modified":1425112197882},{"_id":"source/img/about/h.jpg","hash":"bc613c347a015dd3de1890179e1d4cf1d1856cbe","modified":1472804702337},{"_id":"source/img/project/A.png","hash":"5fb11d9037c94981601868eb143f76c86288375f","modified":1471946462231},{"_id":"source/img/project/B.png","hash":"5fb11d9037c94981601868eb143f76c86288375f","modified":1471946462231},{"_id":"themes/ray/layout/_partial/after_footer.ejs","hash":"77476565bc85987d7656751cbc27b473223b0186","modified":1465955180000},{"_id":"themes/ray/layout/_partial/archive_title.ejs","hash":"3dc915d0ce299510a985d40b9bc8a3e173439b43","modified":1465955180000},{"_id":"themes/ray/layout/_partial/article.ejs","hash":"f6376ea3ee10cd8c55ffefad4009fdef6200e5e4","modified":1473329219106},{"_id":"themes/ray/layout/_partial/archive.ejs","hash":"a2c9a472b554561a3a6f3ef7ec0ece9b1c93ebab","modified":1465955180000},{"_id":"themes/ray/layout/_partial/construction.ejs","hash":"21190b5a0d567ed4ea5d5289459690b72c1452f0","modified":1465955180000},{"_id":"themes/ray/layout/_partial/feature_guide.ejs","hash":"752d5c0a4a6f2f2228ae99bb6bede195080a15d8","modified":1465955180000},{"_id":"themes/ray/layout/_partial/float - 副本.ejs","hash":"a561efd4b391988f4ab71562b62e58fb744dc61a","modified":1465955180000},{"_id":"themes/ray/layout/_partial/float.ejs","hash":"8929694533157cc135bfd596d35c3d37c3723834","modified":1472811524242},{"_id":"themes/ray/layout/_partial/footer.ejs","hash":"b77f160a7baaadbe5ea5b75874e05a6224751820","modified":1473150059754},{"_id":"themes/ray/layout/_partial/float.ejs.bak","hash":"01625ad90d50721640c7207290179911919d52ba","modified":1472811437297},{"_id":"themes/ray/layout/_partial/footer.ejs.bak","hash":"b590fb7a7ae71da7269c887293f309f1849d9c5f","modified":1473150057486},{"_id":"themes/ray/layout/_partial/head.ejs","hash":"465ed01e4e8ad83efdd21776d918e23c4f338d9b","modified":1473330760172},{"_id":"themes/ray/layout/_partial/header.ejs","hash":"426eeb374b409a6ab6eb8e21a7213b6a6147d6f9","modified":1465955180000},{"_id":"themes/ray/layout/_partial/menu_drawer.ejs","hash":"28a46dd851b971216c788ace1ca5609d961c2446","modified":1465955180000},{"_id":"themes/ray/layout/_partial/pagenav.ejs","hash":"e7ada8faaee878ea4dde267d1b420bb45421670d","modified":1465955180000},{"_id":"themes/ray/layout/_partial/pagination.ejs","hash":"247c1507971b3e41ed539dd7f8d15af8e21c0d58","modified":1465955180000},{"_id":"themes/ray/layout/_partial/side_nav.ejs","hash":"b12e72453fb981924d17fa48904af6951f07450f","modified":1465955180000},{"_id":"themes/ray/layout/_partial/search.ejs","hash":"1285a8ecb670f6460b31c0fbca9af13b202f5838","modified":1465955180000},{"_id":"themes/ray/layout/_partial/simple_article.ejs","hash":"3ecc5b0c84003b679e95c99e1d098ec5cfc090ac","modified":1473319407391},{"_id":"themes/ray/layout/_partial/slider.ejs","hash":"bb7b53f6ca9c852808d955fb074f88112e51ea59","modified":1465955180000},{"_id":"themes/ray/layout/_widget/blogroll.ejs","hash":"cf42209342e51e1729dcc9b01b1e5497f152844f","modified":1473326504010},{"_id":"themes/ray/layout/_widget/category.ejs","hash":"fb2d42083c97dfaba2717fb2e63e744259ec4530","modified":1465955180000},{"_id":"themes/ray/layout/_widget/duoshuo_recent_comments.ejs","hash":"7c43ec69f57b7bef51c850bb4b263ac0b4cd3d43","modified":1473326573183},{"_id":"themes/ray/layout/_widget/duoshuo_recent.ejs","hash":"7c43ec69f57b7bef51c850bb4b263ac0b4cd3d43","modified":1473329227118},{"_id":"themes/ray/layout/_widget/recent_posts.ejs","hash":"0025878eb4cbf17ddc909f82497e9c73e4091c20","modified":1465955180000},{"_id":"themes/ray/layout/_widget/tag.ejs","hash":"bc8e48d8afbe7e882cea13b07b634b5ce63e7b61","modified":1465955180000},{"_id":"themes/ray/layout/_widget/tagcloud.ejs","hash":"1da338304f94f042606b73e235e9c725628c34ad","modified":1465955180000},{"_id":"themes/ray/source/css/style.styl","hash":"2c7ef7179e29084efe77c653d537b56889734a22","modified":1465955180000},{"_id":"themes/ray/source/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1465955180000},{"_id":"themes/ray/source/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1465955180000},{"_id":"source/img/about/zfbsk.png","hash":"dfe773c56e903485f21fe18268b29d908d52e472","modified":1471945840136},{"_id":"source/img/about/wxsk.png","hash":"de01bc9c7fb986e18c7742d4924187e96671e477","modified":1471945696437},{"_id":"themes/ray/layout/_partial/plugin/analytics.ejs","hash":"b88303620558f833c6d7505af762d12e21f90f90","modified":1465955180000},{"_id":"themes/ray/layout/_partial/plugin/comment.ejs","hash":"a095ef55ca52e6db052a4e3c93ced2eb6cedf589","modified":1465955180000},{"_id":"themes/ray/layout/_partial/plugin/google_code_prettify.ejs","hash":"3aecf1e3e706417131918e3f489557e2d5f438af","modified":1465955180000},{"_id":"themes/ray/layout/_partial/plugin/main_javascript.ejs","hash":"7cb7addc89cf636e5862f928dbeaa867525ab799","modified":1465955180000},{"_id":"themes/ray/layout/_partial/plugin/noscript.ejs","hash":"182650c8be93b093997ac4d5fe14af2f835b98d9","modified":1465955180000},{"_id":"themes/ray/layout/_partial/plugin/mathjax.ejs","hash":"f0e5e249d2bd6dc2a72baf0f71d2d67463c7b3ad","modified":1465955180000},{"_id":"themes/ray/layout/_partial/plugin/reward.ejs","hash":"fde8d42347f72f3b3594c36b1f3c94c6d90a31b6","modified":1465955180000},{"_id":"themes/ray/layout/_partial/post/category.ejs","hash":"f48f487dc952f5703d9bc7737fc6eb2e6b439608","modified":1465955180000},{"_id":"themes/ray/layout/_partial/post/gallery.ejs","hash":"0adb673358b42b9ac52b2c1f72b92368cdcf5f2e","modified":1465955180000},{"_id":"themes/ray/layout/_partial/post/prev_next.ejs","hash":"bb294b3ecbb27f6d12c3a4d54620bd79ca15b346","modified":1473327517457},{"_id":"themes/ray/layout/_partial/post/tablecontents.ejs","hash":"af8896d7aa85abab4c1641b431d38ae7b0f9ec08","modified":1473320404827},{"_id":"themes/ray/layout/_partial/post/tablecontents.ejs.bak","hash":"a851061909d4e27321d1792a262f55385529fb2d","modified":1473067506175},{"_id":"themes/ray/layout/_partial/post/tag.ejs","hash":"36cbf8f85f93be441d47d1a4a0584afd85480d4f","modified":1465955180000},{"_id":"themes/ray/layout/_partial/post/time.ejs","hash":"166534f9231b5c77c76d9d4fb40f66e2e918837d","modified":1465955180000},{"_id":"themes/ray/layout/_partial/post/title.ejs","hash":"7e48dc0d240ab4bbea27dcb383fb56fb9656c6a9","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/about.styl","hash":"b0f80e89e7518d49190b79985c10c8a7b24bfa19","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/archive.styl","hash":"d912cf297c10e78bd90f3210d596ec87a16f74ad","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/article.styl","hash":"e0aca5b5806b3a99a47612a20670c857b3b6223b","modified":1473330297338},{"_id":"themes/ray/source/css/_partial/comment.styl","hash":"bfa4d7caedffffab18b29f70db9cbf2a15a5f24b","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/footer.styl","hash":"c0d422ce12e0565915148079aa1a134773588568","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/header.styl","hash":"534686e8e9de54e8dd99eb1b064f5ad3a0199a4e","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/index.styl","hash":"27918d50e5a69899f184280d9e0048576ac3c85d","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/link_context.styl","hash":"cd403f732319354781c552d26d37bad7c4450ad5","modified":1473071484928},{"_id":"themes/ray/source/css/_partial/other.styl","hash":"3e3283ed4bbb2a73e80f2af22d3353f14c737fff","modified":1472812003965},{"_id":"themes/ray/source/css/_partial/other.styl.bak","hash":"fbb6b99d11a6d9733a3ee29f0b79d0d0d31ec980","modified":1472811871937},{"_id":"themes/ray/source/css/_partial/reading.styl","hash":"7abecdfc7fd21f7d11f1568d430418296b34945a","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/search.styl","hash":"caef055a95598415656c417e662264397363704b","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/side_nav.styl","hash":"b239b6b55e87e86d038d6aa821beeb66a9cbaf39","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/link_context.styl.bak","hash":"ca63ef5356bc2da514952471eadef19b3d1c88e7","modified":1473070935961},{"_id":"themes/ray/source/css/_partial/slider.styl","hash":"8933a67e92680dbdfd6af7c2ecaa8d86346df907","modified":1465955180000},{"_id":"themes/ray/source/css/_partial/tablecontents.styl","hash":"e214777e7c45117128b69ed4278ba815a6f97241","modified":1471939730345},{"_id":"themes/ray/source/css/_partial/syntax.styl","hash":"a6fb3790c982034fed3e9caee6b7025d0d645cfa","modified":1465955180000},{"_id":"themes/ray/source/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1465955180000},{"_id":"themes/ray/source/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1465955180000},{"_id":"themes/ray/source/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1465955180000},{"_id":"themes/ray/source/css/_base/layout.styl","hash":"821e7910fb9a73bb963c86019afd8cbe16e1ac2e","modified":1473329261840},{"_id":"themes/ray/source/css/_base/icons.css","hash":"ab167f1694ffe10c3c51d18a633efd41be121555","modified":1465955180000},{"_id":"themes/ray/source/css/_base/lib_customize.styl","hash":"8dc2a154dd734126e1d244863a39363b48b94d42","modified":1471940164552},{"_id":"themes/ray/source/css/_base/layout.styl.bak","hash":"849151fab689fdbf8bb97656cbbc08dfd9f7c402","modified":1473148481437},{"_id":"themes/ray/source/css/_base/lib_customize.styl.bak","hash":"5f2b887c29a0743d84eec1eae4d134aad13ace4c","modified":1471938898734},{"_id":"themes/ray/source/css/_base/variable.styl","hash":"6812c6940c7c59b9fab5b41e6b832e89416d11c5","modified":1465955180000},{"_id":"themes/ray/source/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1465955180000},{"_id":"themes/ray/source/css/lib/materialize.min.css","hash":"019d9d175db6768269fba5e0f5790659b71f167a","modified":1473326498663},{"_id":"themes/ray/source/css/lib/materialize.min.css.bak","hash":"fe421bc92ceb66c27641999a7c008b7865017501","modified":1473071295962},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1465955180000},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1465955180000},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1465955180000},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1465955180000},{"_id":"themes/ray/source/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1465955180000},{"_id":"themes/ray/source/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1465955180000},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1465955180000},{"_id":"themes/ray/source/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1465955180000},{"_id":"public/atom.xml","hash":"083093afb656bdce5ee5c8c3a1ce35469bddd768","modified":1473330918326},{"_id":"public/search.xml","hash":"f0f24778e14ce381f8e2fd2e6d28380746a19bbe","modified":1473330313955},{"_id":"public/board/index.html","hash":"d1d69a787d9ca6821991e63c9ce418ccc71b83f3","modified":1473330918513},{"_id":"public/about/index.html","hash":"56bb5c40cf5a749ab8f4912c7d40d095deda3662","modified":1473330918513},{"_id":"public/reading/index.html","hash":"2b55ab77b41d115ddbc81051a4dbcb66e1b9d57b","modified":1473330918514},{"_id":"public/2014/10/09/java_sort/index.html","hash":"d6a21b89341ba1ebe429d3f865b7aa9a77b37dad","modified":1473330918514},{"_id":"public/2014/10/01/linux-dns/index.html","hash":"ce65208614d78e111a052cd0c1e34ebdb8fa396b","modified":1473330918514},{"_id":"public/2013/12/25/hexo_next/index.html","hash":"1cf8fc7db624e6d58255180bbe99965817dddb4c","modified":1473330918514},{"_id":"public/2013/12/20/hexo入门/index.html","hash":"47413dbd9da0a2ae8685932f96af7b2be62233ca","modified":1473330918514},{"_id":"public/archives/index.html","hash":"8f0bc8709701911bd3252f36611cdfeb96135fa6","modified":1473330918514},{"_id":"public/archives/2013/index.html","hash":"237a28b15fa5db884136379fe2edd24f891e9b34","modified":1473330918514},{"_id":"public/archives/2013/12/index.html","hash":"af14da4d2ccc629ce778043442fb6b94d155e9a0","modified":1473330918515},{"_id":"public/archives/2014/index.html","hash":"70ca49d4d99020af6193d44e4b78a09a5b66f4de","modified":1473330918515},{"_id":"public/archives/2014/10/index.html","hash":"afc5a3c1010476b9ece9f56b1b43b36e013f08f3","modified":1473330918515},{"_id":"public/categories/Hexo/index.html","hash":"6978283f0094c15b051dbc5dc86ce3b1c47a7fee","modified":1473330918515},{"_id":"public/categories/Java/index.html","hash":"c772019771b008f451a484fe58d825a9fc34577d","modified":1473330918515},{"_id":"public/categories/linux/index.html","hash":"57206ad9e4f1803a23c637c4564f63abddea7199","modified":1473330918515},{"_id":"public/index.html","hash":"980b2d727d2f1b5d2832bfbfb3fc2ba43c8a0af4","modified":1473330918515},{"_id":"public/tags/Java/index.html","hash":"47994ecd573bea5ebe3b97ed418f83188f3a7875","modified":1473330918516},{"_id":"public/tags/排序/index.html","hash":"e33f57fd339480c1f6f483af82fe33201c0115d0","modified":1473330918516},{"_id":"public/tags/linux/index.html","hash":"cbdec391c0fa782f0aaba741335b42b6fc052029","modified":1473330918516},{"_id":"public/tags/dns/index.html","hash":"8e559920cd0660dd036e9d9ebe57ff72a959bfa5","modified":1473330918516},{"_id":"public/favicon.png","hash":"54af2e6bc39c64a2c87a84806a89188eb8cc65d8","modified":1473330313989},{"_id":"public/weixin_favicon.png","hash":"4e287dd2c6324fac39c54efa75b4e7f654e543d3","modified":1473330313989},{"_id":"public/img/project/A.png","hash":"5fb11d9037c94981601868eb143f76c86288375f","modified":1473330313989},{"_id":"public/img/about/h.jpg","hash":"bc613c347a015dd3de1890179e1d4cf1d1856cbe","modified":1473330313989},{"_id":"public/img/project/B.png","hash":"5fb11d9037c94981601868eb143f76c86288375f","modified":1473330313989},{"_id":"public/css/images/side-user-cover.jpg","hash":"d8d73a64d6d5af83a27e6af1d4fedef808955ba0","modified":1473330313989},{"_id":"public/css/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1473330313989},{"_id":"public/css/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1473330313989},{"_id":"public/css/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1473330313990},{"_id":"public/css/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1473330313990},{"_id":"public/CNAME","hash":"f0de6ffa9ebdb0edf49477e29dc03a4b21b51702","modified":1473330313990},{"_id":"public/css/lib/materialize.min.css.bak","hash":"fe421bc92ceb66c27641999a7c008b7865017501","modified":1473330314696},{"_id":"public/css/font/font-awesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1473330314703},{"_id":"public/css/font/font-awesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1473330314704},{"_id":"public/css/font/font-awesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1473330314704},{"_id":"public/css/font/font-awesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1473330314704},{"_id":"public/css/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1473330314704},{"_id":"public/css/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1473330314704},{"_id":"public/css/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1473330314704},{"_id":"public/css/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1473330314704},{"_id":"public/js/prettify.js","hash":"d24b1da342b5c2d0582f0922118aaf0b2a6840d5","modified":1473330314709},{"_id":"public/css/lib/prettify-tomorrow-night-eighties.css","hash":"35e07bd7a4585363060edd558a0e9939e7e68323","modified":1473330314709},{"_id":"public/css/style.css","hash":"8c7d28b4710a65250c1dd9c7fca3f0852c7b1e20","modified":1473330314709},{"_id":"public/js/jquery.min.js","hash":"69bb69e25ca7d5ef0935317584e6153f3fd9a88c","modified":1473330314709},{"_id":"public/css/lib/font-awesome.min.css","hash":"683d12731b7429d32ec7de00a6706602e403013f","modified":1473330314709},{"_id":"public/js/materialize.min.js","hash":"c9308fbe808a149aa11061af40a4be5f391cccee","modified":1473330314709},{"_id":"public/css/lib/materialize.min.css","hash":"019d9d175db6768269fba5e0f5790659b71f167a","modified":1473330314709},{"_id":"public/img/about/zfbsk.png","hash":"dfe773c56e903485f21fe18268b29d908d52e472","modified":1473330314709},{"_id":"public/img/about/wxsk.png","hash":"de01bc9c7fb986e18c7742d4924187e96671e477","modified":1473330314710},{"_id":"public/css/font/font-awesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1473330314710},{"_id":"public/css/font/font-awesome/fontawesome-webfont.svg","hash":"b06b5c8f67fd632cdc62a33b62ae4f74194131b3","modified":1473330314723}],"Category":[{"name":"Hexo","_id":"cisu6ttgk0004o4bx8p5lnaa8"},{"name":"Java","_id":"cisu6ttgz000bo4bx2vx1jnj1"},{"name":"linux","_id":"cisu6tth2000eo4bxnlthtiks"}],"Data":[{"_id":"slider","data":""},{"_id":"about","data":{"avatar":"/img/about/h.jpg","name":"wolego","tag":"超级奶爸/技术宅","desc":"生命在于折腾!","skills":{"Javascript":8,"Node.js":6,"Java":6,"Linux":6,"invisible-split-line-1":-1},"projects":[{"name":"项目A","image":"../img/project/A.png","tags":["2015年","项目标签"],"description":"项目A的简介","link_text":"网站链接","link":"#"},{"name":"你的作品B","image":"../img/project/B.png","description":"作品B的简介","tags":["Github","设计"],"link_text":"Github地址","link":"https://github.com/"}],"reward":["../img/about/wxsk.png","../img/about/zfbsk.png"]}},{"_id":"hint","data":{"new":{"selector":[]}}},{"_id":"hint.json","data":"{\n    \"new\": {\n        \"selector\": [\n           \".menu-reading\",\n            \".menu-about\"\n        ]\n    }\n}\n"},{"_id":"link.json","data":"{\n    \"social\": {\n        \"weibo\": \"http://weibo.com/1956184117\",\n        \"github\": \"https://github.com/raytaylorlin\",\n\t\t\"rss\": \"/atom.xml\"\n    }\n    ,\n    \"extern\": {\n\t    \"raytaylorism主题作者的技术博客\": \"http://raytaylorlin.com/\",\n\t\t\"Github地址（测试友情链接）\": \"https://github.com/raytaylorlin\"\n    }\n}\n"},{"_id":"reading","data":{"define":{"readed":"已读","reading":"在读","wanted":"想读"},"contents":{"readed":[{"title":"众妙之门：网站UI设计之道","cover":"http://img3.douban.com/lpic/s23139051.jpg","review":"推荐非UI人士了解UI阅读。","score":"7","doubanLink":"http://book.douban.com/subject/20281463/"},{"title":"JavaScript模式","cover":"http://img5.douban.com/lpic/s11337059.jpg","review":"书很薄，但内容相当实用。","score":"8.5","doubanLink":"http://book.douban.com/subject/11506062/"},{"title":"JavaScript语言精粹","cover":"http://img3.douban.com/lpic/s11373174.jpg","review":"这是一本前端人员的基础书，强烈推荐阅读，而且越早看受益越多！","score":"9.5","doubanLink":"http://book.douban.com/subject/11874748/"}],"reading":[{"title":"网络游戏核心技术与实战","cover":"http://img4.douban.com/lpic/s27881888.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/25850090/"}],"wanted":[{"title":"计算机程序的构造和解释","cover":"http://img4.douban.com/lpic/s1113106.jpg","review":"","score":null,"doubanLink":"http://book.douban.com/subject/1148282/"}]}}},{"_id":"link","data":"{\n    \"social\": {\n        \"weibo\": \"http://weibo.com/1956184117\",\n        \"github\": \"https://github.com/raytaylorlin\",\n\t\t\"rss\": \"/atom.xml\"\n    },\n    \"extern\": {\n\t    \"raytaylorism主题作者的技术博客\": \"http://raytaylorlin.com/\",\n\t\t\"Github地址（测试友情链接）\": \"https://github.com/raytaylorlin\"\n    }\n}\n"},{"_id":"slider.json","data":"[{\n    \"image\": \"http://thumbnail0.baidupcs.com/thumbnail/c5bf49a8c410b38ecb330001f7bf6947?fid=3675107740-250528-849127521187428&time=1472796000&rt=sh&sign=FDTAER-DCb740ccc5511e5e8fedcff06b081203-HqDk3hy%2BnV5pJwqxDmZ81d76qsY%3D&expires=2h&chkv=0&chkbd=0&chkpc=&dp-logid=1027247853&dp-callid=0&size=c850_u580&quality=100\",\n    \"align\": \"center\",\n    \"title\": \"\",\n    \"subtitle\": \"\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"../img/index/2.jpg\",\n    \"align\": \"center\",\n    \"title\": \"\",\n    \"subtitle\": \"\",\n\t\"link\": null\n}]\n"},{"_id":"slider.json~","data":"[{\n    \"image\": \"../img/index/1.jpg\",\n    \"align\": \"center\",\n    \"title\": \"\",\n    \"subtitle\": \"\",\n\t\"link\": \"/\"\n}, {\n    \"image\": \"../img/index/2.jpg\",\n    \"align\": \"center\",\n    \"title\": \"\",\n    \"subtitle\": \"\",\n\t\"link\": null\n}]\n"},{"_id":"about.json","data":"{\n    \"avatar\": \"../img/ablout/h.jpg\",\n    \"name\": \"wolego\",\n    \"tag\": \"超级奶爸/技术宅\",\n    \"desc\": \"生命在于折腾!\",\n    \"skills\": {\n\t\t\"Javascript\": 8,\t\n\t\t\"Node.js\": 6,\n\t\t\"Java\": 6,\n\t\t\"Linux\": 6,\n\t\t\"invisible-split-line-1\": -1\n    },\n    \"projects\": [{\n\t\t\"name\": \"项目A\",\n\t\t\"image\": \"../img/project/A.png\",\n\t\t\"tags\": [\"2015年\", \"项目标签\"],\n\t\t\"description\": \"项目A的简介\",\n\t\t\"link_text\": \"网站链接\",\n\t\t\"link\": \"#\"\n\t}, {\n\t\t\"name\": \"你的作品B\",\n\t\t\"image\": \"../img/project/B.png\",\n\t\t\"description\": \"作品B的简介\",\n\t\t\"tags\": [\"Github\", \"设计\"],\n\t\t\"link_text\": \"Github地址\",\n\t\t\"link\": \"https://github.com/\"\n\t}],\n\t\"reward\": [\n\t\t\"../img/about/wxsk.png\",\n\t\t\"../img/about/zfbsk.png\"\n\t]\n}\n"}],"Page":[{"title":"留言板","date":"2012-12-31T16:00:00.000Z","comments":1,"_content":"有任何问题请留言，很乐意与大家沟通交流！\n\n","source":"board/index.md","raw":"title: 留言板\ndate: 2013-01-01\ncomments: ture\n---\n有任何问题请留言，很乐意与大家沟通交流！\n\n","updated":"2016-09-08T08:33:56.134Z","path":"board/index.html","layout":"page","_id":"cisu6ttge0001o4bxhf9ufr3j","content":"<p>有任何问题请留言，很乐意与大家沟通交流！</p>\n","excerpt":"","more":"<p>有任何问题请留言，很乐意与大家沟通交流！</p>\n"},{"title":"关于","layout":"about","_content":"生命在于折腾!\n\n","source":"about/index.md","raw":"title: 关于\nlayout: about\n---\n生命在于折腾!\n\n","date":"2016-08-23T09:55:42.318Z","updated":"2016-08-23T09:55:42.318Z","path":"about/index.html","comments":1,"_id":"cisu6ttgi0003o4bxvr0ao9sk","content":"<p>生命在于折腾!</p>\n","excerpt":"","more":"<p>生命在于折腾!</p>\n"},{"title":"读书","layout":"reading","_content":"","source":"reading/index.md","raw":"title: 读书\nlayout: reading\n---\n","date":"2016-08-16T10:26:37.688Z","updated":"2016-06-15T01:46:20.000Z","path":"reading/index.html","comments":1,"_id":"cisu6ttho000mo4bxr4fexxmw","content":"","excerpt":"","more":""}],"Post":[{"title":"Hexo入门","date":"2013-12-19T16:00:00.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hexo入门.md","raw":"---\ntitle: Hexo入门\ncategory: Hexo\ndate: 2013-12-20\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n<!-- more -->\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hexo入门","published":1,"updated":"2016-09-06T10:30:53.580Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu6ttga0000o4bx1srx4h79","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>","more":"<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>"},{"title":"Hexo 功能完善","date":"2013-12-24T16:00:00.000Z","_content":"### 给Hexo添加“上一篇”、“下一篇”导航\n我使用的是Hexo的默认主题light，该主题的文章页面没有提供“上一篇”和“下一篇”导航功能，而我又非常喜欢默认主题的清爽简洁，只能自己折腾了。\n在Hexo官方文档中变量说明部分我们可以知道，在 Article (post, page, …) 中page.prev和page.next分别代表上一篇和下一篇文章，这两个变量都是一个page对象，所以通过page.prev.path和page.prev.title就可以获取到上一篇文章的相对路径和标题，然后通过修改/themes/light/layout/文件夹中的文件来实现我们的功能。\n首先，在/themes/light/layout/_partial/post/文件夹中新建prev_next.ejs文件。\n<!-- more -->\nprev_next.ejs\n```\n<% if (page.prev || page.next){ %>\n<div class=\"prev_next clearfix\">\n  <% if (page.prev){ %>\n    <a href=\"<%- config.root %><%- page.prev.path %>\" class=\"alignleft prev\" title=\"<%= page.prev.title %>\"><%= page.prev.title %></a>\n  <% } %>\n  <% if (page.next){ %>\n    <a href=\"<%- config.root %><%- page.next.path %>\" class=\"alignright next\" title=\"<%= page.next.title %>\"><%= page.next.title %></a>\n  <% } %>\n</div>\n<% } %>\n```\n然后，修改/themes/light/layout/_partial/article.ejs文章模板，找到需要加入“上一篇”和“下一篇”导航功能的位置，加上<%- partial('post/prev_next') %>，比如这样：\n```\n      <% } else { %>\n        <%- partial('post/category') %>\n        <%- partial('post/tag') %>\n        <%- partial('post/share') %>\n        <%- partial('post/prev_next') %>\n      <% } %>\n      <div class=\"clearfix\"></div>\n    </footer>\n  </div>\n</article>\n\n<%- partial('comment') %>\n```\n最后，在/themes/light/source/css/_partial/article.styl文件末尾添加上相应的CSS。\n```\n.prev_next\n  margin 1em 0\n  clear both\n  overflow hidden\n  a\n    display block\n    float left\n    width 50%\n    background #dbdbdb\n    text-align center\n    padding 0.4em 0\n    color #1ba1e2\n    transition background .45s color .45s\n    &:hover\n      color #fafafa\n      background #717171\n    &.prev::before\n      content \"上一篇：\"\n      padding-right 0.5em\n    &.next::before\n      content \"下一篇：\"\n      padding-right 0.5em\n```\n### 给博客和文章添加keywords\n---\n默认情况下博客和文章是没有关键字的，可以安装如下方法修改。\n首先，在博客配置文件/Hexo/_config.yml中添加keywords:字段，关键字以英文,分割，如下:\n```\n# Site\ntitle: typeof this  #站点名\nsubtitle:    # 副标题\ndescription: # 站点描述，搜索引擎\nauthor: typeof\nemail: xxx@admin.com\nlanguage: zh-CN\nkeywords: Web,前端,JavaScript,html5,css3 # 博客关键字\n```\n然后，修改模板文件，我用的是light模板，修改/themes/light/layout/_partial/head.ejs\n```\n#删除下面这行\n<% if (page.keywords){ %><meta name=\"keywords\" content=\"<%= page.keywords %>\"><% } %>\n#增加以下内容\n<% if (page.keywords){ %>\n<meta name=\"keywords\" content=\"<%= page.keywords %>,<%= config.keywords %>\">\n<% } else if (config.keywords){ %>\n<meta name=\"keywords\" content=\"<%= config.keywords %>\">\n<%} %>\n```\n简单说明一下：如果页面有关键字，则用页面的关键字加上配置文件里面的关键字，如果没有关键字，则用配置文件的关键字。\n要给文章添加关键字，只需要在文章里面加入keywords:即可。也可以直接修改创建文章的模板/scaffolds/post.md，在最下面添加keywords:，如下：\n```\ntitle: {{ title }}\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\nkeywords:\n```\n### 添加自定义widget\n---\n添加widget的方法很简单，首先在/themes/light/layout/_widget/文件夹中创建widget文件your_widget.ejs，然后在主题配置文件中加载你的widget，下面通过创建一个友情链的widget来看看具体操作。\n友情链接包含连接名称和连接地址两个属性，看到有的教程中把友情连接直接静态地写在widget中，修改起来不方便，所以要借助主题配置文件_config.yml和Hexo提供的访问配置文件的对象theme。\n首先，在/themes/flight/_config.yml文件中添加如下节。\n### 友情链接\n```\nblogrolls: #友情链接\n  - Hexo: http://hexo.io\n  - Hexo Document: http://hexo.io/docs\n  - github: https://github.com/\n  - jQuery: http://jquery.com/\n```\n然后，在/themes/light/layout/_widget/文件夹中创建友情连接widget文件blogroll.ejs，内容可以这样：\n```\n<% if (theme.blogrolls && theme.blogrolls.length > 0) { %>\n<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('blogroll') %></h3>\n  <ul class=\"entry\">\n  <% theme.blogrolls.forEach(function(item){ %>\n    <%\n      var description, linkURL\n      for (var tmp in item) {\n        description = tmp;\n        linkURL = item[tmp];\n      }\n    %>\n    <li><a href=\"<%- linkURL %>\" target=\"_blank\"><%= description %></a></li>\n  <% }); %>\n  </ul>\n</div>\n<% } %>\n```\n最后，修改主题配置文件/themes/flight/_config.yml，在widgets下增加blogroll。如下：\n```\nwidgets:\n  - category\n  - tag\n  - recent_posts\n  - blogroll\n```\n友情连接widget就创建好了，hexo server，在本地http://localhost:4000/查看效果吧！同样，我们可以使用此方法添加个人说明，微博秀等widget。\n添加最新评论widget\n首先需要声明的是本屌用的是多说评论系统，所以最新评论widget也是利用多说提供的API来实现，上一节已经分享了怎么创建自定义的widget，现在我们按照上面的方法来一步一步实现该widget。\n在/themes/light/layout/_widget/文件夹下创建最新评论小挂件recent_comments.ejs，内容如下：\n```\n<% if (theme.duoshuo){ %>\n<div class=\"widget recent_comments\">\n  <h3 class=\"title\"><%= __('recent_comments') %></h3>\n  <ul class=\"entry ds-recent-comments\" data-num-items=\"5\" data-show-avatars=\"0\" data-show-title=\"1\" data-show-time=\"1\"></ul>\n  <script type=\"text/javascript\">\n  if(typeof duoshuoQuery === 'undefined'){\n    var duoshuoQuery = {short_name:\"<%- theme.duoshuo %>\"};\n    (function() {\n      var ds = document.createElement('script');\n      ds.type = 'text/javascript';ds.async = true;\n      ds.src = 'http://static.duoshuo.com/embed.js';\n      ds.charset = 'UTF-8';\n      (document.getElementsByTagName('head')[0]\n      || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n  }\n  </script>\n</div>\n<% } %>\n```\n简单说明，在每个页面中，如果使用多个多说控件，只需要添加一次多说js，所以这里有这样的判断if(typeof duoshuoQuery==='undefined')，在需要用到多说的位置都加上这个判断，避免多次加载js文件；另外多说评论相关的参数：data-num-items显示的评论条数，data-show-avatars是否显示用户头像，data-show-title是否显示文章标题，data-show-time是否显示评论时间，具体参数说明可以参考多说官方说明文档，按照官方文档还可以添加多说最近访客小部件和热评文章小部件。\n","source":"_posts/hexo_next.md","raw":"---\ntitle: Hexo 功能完善\ncategory: Hexo\ndate: 2013-12-25\n---\n### 给Hexo添加“上一篇”、“下一篇”导航\n我使用的是Hexo的默认主题light，该主题的文章页面没有提供“上一篇”和“下一篇”导航功能，而我又非常喜欢默认主题的清爽简洁，只能自己折腾了。\n在Hexo官方文档中变量说明部分我们可以知道，在 Article (post, page, …) 中page.prev和page.next分别代表上一篇和下一篇文章，这两个变量都是一个page对象，所以通过page.prev.path和page.prev.title就可以获取到上一篇文章的相对路径和标题，然后通过修改/themes/light/layout/文件夹中的文件来实现我们的功能。\n首先，在/themes/light/layout/_partial/post/文件夹中新建prev_next.ejs文件。\n<!-- more -->\nprev_next.ejs\n```\n<% if (page.prev || page.next){ %>\n<div class=\"prev_next clearfix\">\n  <% if (page.prev){ %>\n    <a href=\"<%- config.root %><%- page.prev.path %>\" class=\"alignleft prev\" title=\"<%= page.prev.title %>\"><%= page.prev.title %></a>\n  <% } %>\n  <% if (page.next){ %>\n    <a href=\"<%- config.root %><%- page.next.path %>\" class=\"alignright next\" title=\"<%= page.next.title %>\"><%= page.next.title %></a>\n  <% } %>\n</div>\n<% } %>\n```\n然后，修改/themes/light/layout/_partial/article.ejs文章模板，找到需要加入“上一篇”和“下一篇”导航功能的位置，加上<%- partial('post/prev_next') %>，比如这样：\n```\n      <% } else { %>\n        <%- partial('post/category') %>\n        <%- partial('post/tag') %>\n        <%- partial('post/share') %>\n        <%- partial('post/prev_next') %>\n      <% } %>\n      <div class=\"clearfix\"></div>\n    </footer>\n  </div>\n</article>\n\n<%- partial('comment') %>\n```\n最后，在/themes/light/source/css/_partial/article.styl文件末尾添加上相应的CSS。\n```\n.prev_next\n  margin 1em 0\n  clear both\n  overflow hidden\n  a\n    display block\n    float left\n    width 50%\n    background #dbdbdb\n    text-align center\n    padding 0.4em 0\n    color #1ba1e2\n    transition background .45s color .45s\n    &:hover\n      color #fafafa\n      background #717171\n    &.prev::before\n      content \"上一篇：\"\n      padding-right 0.5em\n    &.next::before\n      content \"下一篇：\"\n      padding-right 0.5em\n```\n### 给博客和文章添加keywords\n---\n默认情况下博客和文章是没有关键字的，可以安装如下方法修改。\n首先，在博客配置文件/Hexo/_config.yml中添加keywords:字段，关键字以英文,分割，如下:\n```\n# Site\ntitle: typeof this  #站点名\nsubtitle:    # 副标题\ndescription: # 站点描述，搜索引擎\nauthor: typeof\nemail: xxx@admin.com\nlanguage: zh-CN\nkeywords: Web,前端,JavaScript,html5,css3 # 博客关键字\n```\n然后，修改模板文件，我用的是light模板，修改/themes/light/layout/_partial/head.ejs\n```\n#删除下面这行\n<% if (page.keywords){ %><meta name=\"keywords\" content=\"<%= page.keywords %>\"><% } %>\n#增加以下内容\n<% if (page.keywords){ %>\n<meta name=\"keywords\" content=\"<%= page.keywords %>,<%= config.keywords %>\">\n<% } else if (config.keywords){ %>\n<meta name=\"keywords\" content=\"<%= config.keywords %>\">\n<%} %>\n```\n简单说明一下：如果页面有关键字，则用页面的关键字加上配置文件里面的关键字，如果没有关键字，则用配置文件的关键字。\n要给文章添加关键字，只需要在文章里面加入keywords:即可。也可以直接修改创建文章的模板/scaffolds/post.md，在最下面添加keywords:，如下：\n```\ntitle: {{ title }}\ndate: {{ date }}\nupdated: {{ date }}\ntags:\ncategories:\nkeywords:\n```\n### 添加自定义widget\n---\n添加widget的方法很简单，首先在/themes/light/layout/_widget/文件夹中创建widget文件your_widget.ejs，然后在主题配置文件中加载你的widget，下面通过创建一个友情链的widget来看看具体操作。\n友情链接包含连接名称和连接地址两个属性，看到有的教程中把友情连接直接静态地写在widget中，修改起来不方便，所以要借助主题配置文件_config.yml和Hexo提供的访问配置文件的对象theme。\n首先，在/themes/flight/_config.yml文件中添加如下节。\n### 友情链接\n```\nblogrolls: #友情链接\n  - Hexo: http://hexo.io\n  - Hexo Document: http://hexo.io/docs\n  - github: https://github.com/\n  - jQuery: http://jquery.com/\n```\n然后，在/themes/light/layout/_widget/文件夹中创建友情连接widget文件blogroll.ejs，内容可以这样：\n```\n<% if (theme.blogrolls && theme.blogrolls.length > 0) { %>\n<div class=\"widget tag\">\n  <h3 class=\"title\"><%= __('blogroll') %></h3>\n  <ul class=\"entry\">\n  <% theme.blogrolls.forEach(function(item){ %>\n    <%\n      var description, linkURL\n      for (var tmp in item) {\n        description = tmp;\n        linkURL = item[tmp];\n      }\n    %>\n    <li><a href=\"<%- linkURL %>\" target=\"_blank\"><%= description %></a></li>\n  <% }); %>\n  </ul>\n</div>\n<% } %>\n```\n最后，修改主题配置文件/themes/flight/_config.yml，在widgets下增加blogroll。如下：\n```\nwidgets:\n  - category\n  - tag\n  - recent_posts\n  - blogroll\n```\n友情连接widget就创建好了，hexo server，在本地http://localhost:4000/查看效果吧！同样，我们可以使用此方法添加个人说明，微博秀等widget。\n添加最新评论widget\n首先需要声明的是本屌用的是多说评论系统，所以最新评论widget也是利用多说提供的API来实现，上一节已经分享了怎么创建自定义的widget，现在我们按照上面的方法来一步一步实现该widget。\n在/themes/light/layout/_widget/文件夹下创建最新评论小挂件recent_comments.ejs，内容如下：\n```\n<% if (theme.duoshuo){ %>\n<div class=\"widget recent_comments\">\n  <h3 class=\"title\"><%= __('recent_comments') %></h3>\n  <ul class=\"entry ds-recent-comments\" data-num-items=\"5\" data-show-avatars=\"0\" data-show-title=\"1\" data-show-time=\"1\"></ul>\n  <script type=\"text/javascript\">\n  if(typeof duoshuoQuery === 'undefined'){\n    var duoshuoQuery = {short_name:\"<%- theme.duoshuo %>\"};\n    (function() {\n      var ds = document.createElement('script');\n      ds.type = 'text/javascript';ds.async = true;\n      ds.src = 'http://static.duoshuo.com/embed.js';\n      ds.charset = 'UTF-8';\n      (document.getElementsByTagName('head')[0]\n      || document.getElementsByTagName('body')[0]).appendChild(ds);\n    })();\n  }\n  </script>\n</div>\n<% } %>\n```\n简单说明，在每个页面中，如果使用多个多说控件，只需要添加一次多说js，所以这里有这样的判断if(typeof duoshuoQuery==='undefined')，在需要用到多说的位置都加上这个判断，避免多次加载js文件；另外多说评论相关的参数：data-num-items显示的评论条数，data-show-avatars是否显示用户头像，data-show-title是否显示文章标题，data-show-time是否显示评论时间，具体参数说明可以参考多说官方说明文档，按照官方文档还可以添加多说最近访客小部件和热评文章小部件。\n","slug":"hexo_next","published":1,"updated":"2016-09-08T10:04:29.262Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisu6ttgg0002o4bxcwrzw901","content":"<h3 id=\"给Hexo添加“上一篇”、“下一篇”导航\"><a href=\"#给Hexo添加“上一篇”、“下一篇”导航\" class=\"headerlink\" title=\"给Hexo添加“上一篇”、“下一篇”导航\"></a>给Hexo添加“上一篇”、“下一篇”导航</h3><p>我使用的是Hexo的默认主题light，该主题的文章页面没有提供“上一篇”和“下一篇”导航功能，而我又非常喜欢默认主题的清爽简洁，只能自己折腾了。<br>在Hexo官方文档中变量说明部分我们可以知道，在 Article (post, page, …) 中page.prev和page.next分别代表上一篇和下一篇文章，这两个变量都是一个page对象，所以通过page.prev.path和page.prev.title就可以获取到上一篇文章的相对路径和标题，然后通过修改/themes/light/layout/文件夹中的文件来实现我们的功能。<br>首先，在/themes/light/layout/_partial/post/文件夹中新建prev_next.ejs文件。<br><a id=\"more\"></a><br>prev_next.ejs<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% if (page.prev || page.next)&#123; %&gt;</div><div class=\"line\">&lt;div class=&quot;prev_next clearfix&quot;&gt;</div><div class=\"line\">  &lt;% if (page.prev)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;&quot; class=&quot;alignleft prev&quot; title=&quot;&lt;%= page.prev.title %&gt;&quot;&gt;&lt;%= page.prev.title %&gt;&lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">  &lt;% if (page.next)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;&quot; class=&quot;alignright next&quot; title=&quot;&lt;%= page.next.title %&gt;&quot;&gt;&lt;%= page.next.title %&gt;&lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后，修改/themes/light/layout/_partial/article.ejs文章模板，找到需要加入“上一篇”和“下一篇”导航功能的位置，加上&lt;%- partial(‘post/prev_next’) %&gt;，比如这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">      &lt;% &#125; else &#123; %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/category&apos;) %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/tag&apos;) %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/share&apos;) %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/prev_next&apos;) %&gt;</div><div class=\"line\">      &lt;% &#125; %&gt;</div><div class=\"line\">      &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/footer&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/article&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;%- partial(&apos;comment&apos;) %&gt;</div></pre></td></tr></table></figure></p>\n<p>最后，在/themes/light/source/css/_partial/article.styl文件末尾添加上相应的CSS。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">.prev_next</div><div class=\"line\">  margin 1em 0</div><div class=\"line\">  clear both</div><div class=\"line\">  overflow hidden</div><div class=\"line\">  a</div><div class=\"line\">    display block</div><div class=\"line\">    float left</div><div class=\"line\">    width 50%</div><div class=\"line\">    background #dbdbdb</div><div class=\"line\">    text-align center</div><div class=\"line\">    padding 0.4em 0</div><div class=\"line\">    color #1ba1e2</div><div class=\"line\">    transition background .45s color .45s</div><div class=\"line\">    &amp;:hover</div><div class=\"line\">      color #fafafa</div><div class=\"line\">      background #717171</div><div class=\"line\">    &amp;.prev::before</div><div class=\"line\">      content &quot;上一篇：&quot;</div><div class=\"line\">      padding-right 0.5em</div><div class=\"line\">    &amp;.next::before</div><div class=\"line\">      content &quot;下一篇：&quot;</div><div class=\"line\">      padding-right 0.5em</div></pre></td></tr></table></figure></p>\n<h3 id=\"给博客和文章添加keywords\"><a href=\"#给博客和文章添加keywords\" class=\"headerlink\" title=\"给博客和文章添加keywords\"></a>给博客和文章添加keywords</h3><hr>\n<p>默认情况下博客和文章是没有关键字的，可以安装如下方法修改。<br>首先，在博客配置文件/Hexo/_config.yml中添加keywords:字段，关键字以英文,分割，如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># Site</div><div class=\"line\">title: typeof this  #站点名</div><div class=\"line\">subtitle:    # 副标题</div><div class=\"line\">description: # 站点描述，搜索引擎</div><div class=\"line\">author: typeof</div><div class=\"line\">email: xxx@admin.com</div><div class=\"line\">language: zh-CN</div><div class=\"line\">keywords: Web,前端,JavaScript,html5,css3 # 博客关键字</div></pre></td></tr></table></figure></p>\n<p>然后，修改模板文件，我用的是light模板，修改/themes/light/layout/_partial/head.ejs<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">#删除下面这行</div><div class=\"line\">&lt;% if (page.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;&quot;&gt;&lt;% &#125; %&gt;</div><div class=\"line\">#增加以下内容</div><div class=\"line\">&lt;% if (page.keywords)&#123; %&gt;</div><div class=\"line\">&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;,&lt;%= config.keywords %&gt;&quot;&gt;</div><div class=\"line\">&lt;% &#125; else if (config.keywords)&#123; %&gt;</div><div class=\"line\">&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= config.keywords %&gt;&quot;&gt;</div><div class=\"line\">&lt;%&#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>简单说明一下：如果页面有关键字，则用页面的关键字加上配置文件里面的关键字，如果没有关键字，则用配置文件的关键字。<br>要给文章添加关键字，只需要在文章里面加入keywords:即可。也可以直接修改创建文章的模板/scaffolds/post.md，在最下面添加keywords:，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">title: &#123;&#123; title &#125;&#125;</div><div class=\"line\">date: &#123;&#123; date &#125;&#125;</div><div class=\"line\">updated: &#123;&#123; date &#125;&#125;</div><div class=\"line\">tags:</div><div class=\"line\">categories:</div><div class=\"line\">keywords:</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加自定义widget\"><a href=\"#添加自定义widget\" class=\"headerlink\" title=\"添加自定义widget\"></a>添加自定义widget</h3><hr>\n<p>添加widget的方法很简单，首先在/themes/light/layout/_widget/文件夹中创建widget文件your_widget.ejs，然后在主题配置文件中加载你的widget，下面通过创建一个友情链的widget来看看具体操作。<br>友情链接包含连接名称和连接地址两个属性，看到有的教程中把友情连接直接静态地写在widget中，修改起来不方便，所以要借助主题配置文件_config.yml和Hexo提供的访问配置文件的对象theme。<br>首先，在/themes/flight/_config.yml文件中添加如下节。</p>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - Hexo: http://hexo.io</div><div class=\"line\">  - Hexo Document: http://hexo.io/docs</div><div class=\"line\">  - github: https://github.com/</div><div class=\"line\">  - jQuery: http://jquery.com/</div></pre></td></tr></table></figure>\n<p>然后，在/themes/light/layout/_widget/文件夹中创建友情连接widget文件blogroll.ejs，内容可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.blogrolls &amp;&amp; theme.blogrolls.length &gt; 0) &#123; %&gt;</div><div class=\"line\">&lt;div class=&quot;widget tag&quot;&gt;</div><div class=\"line\">  &lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;blogroll&apos;) %&gt;&lt;/h3&gt;</div><div class=\"line\">  &lt;ul class=&quot;entry&quot;&gt;</div><div class=\"line\">  &lt;% theme.blogrolls.forEach(function(item)&#123; %&gt;</div><div class=\"line\">    &lt;%</div><div class=\"line\">      var description, linkURL</div><div class=\"line\">      for (var tmp in item) &#123;</div><div class=\"line\">        description = tmp;</div><div class=\"line\">        linkURL = item[tmp];</div><div class=\"line\">      &#125;</div><div class=\"line\">    %&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;&lt;%- linkURL %&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%= description %&gt;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;% &#125;); %&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>最后，修改主题配置文件/themes/flight/_config.yml，在widgets下增加blogroll。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">  - category</div><div class=\"line\">  - tag</div><div class=\"line\">  - recent_posts</div><div class=\"line\">  - blogroll</div></pre></td></tr></table></figure></p>\n<p>友情连接widget就创建好了，hexo server，在本地<a href=\"http://localhost:4000/查看效果吧！同样，我们可以使用此方法添加个人说明，微博秀等widget。\" target=\"_blank\" rel=\"external\">http://localhost:4000/查看效果吧！同样，我们可以使用此方法添加个人说明，微博秀等widget。</a><br>添加最新评论widget<br>首先需要声明的是本屌用的是多说评论系统，所以最新评论widget也是利用多说提供的API来实现，上一节已经分享了怎么创建自定义的widget，现在我们按照上面的方法来一步一步实现该widget。<br>在/themes/light/layout/_widget/文件夹下创建最新评论小挂件recent_comments.ejs，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.duoshuo)&#123; %&gt;</div><div class=\"line\">&lt;div class=&quot;widget recent_comments&quot;&gt;</div><div class=\"line\">  &lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;) %&gt;&lt;/h3&gt;</div><div class=\"line\">  &lt;ul class=&quot;entry ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;0&quot; data-show-title=&quot;1&quot; data-show-time=&quot;1&quot;&gt;&lt;/ul&gt;</div><div class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">  if(typeof duoshuoQuery === &apos;undefined&apos;)&#123;</div><div class=\"line\">    var duoshuoQuery = &#123;short_name:&quot;&lt;%- theme.duoshuo %&gt;&quot;&#125;;</div><div class=\"line\">    (function() &#123;</div><div class=\"line\">      var ds = document.createElement(&apos;script&apos;);</div><div class=\"line\">      ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class=\"line\">      ds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</div><div class=\"line\">      ds.charset = &apos;UTF-8&apos;;</div><div class=\"line\">      (document.getElementsByTagName(&apos;head&apos;)[0]</div><div class=\"line\">      || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class=\"line\">    &#125;)();</div><div class=\"line\">  &#125;</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>简单说明，在每个页面中，如果使用多个多说控件，只需要添加一次多说js，所以这里有这样的判断if(typeof duoshuoQuery===’undefined’)，在需要用到多说的位置都加上这个判断，避免多次加载js文件；另外多说评论相关的参数：data-num-items显示的评论条数，data-show-avatars是否显示用户头像，data-show-title是否显示文章标题，data-show-time是否显示评论时间，具体参数说明可以参考多说官方说明文档，按照官方文档还可以添加多说最近访客小部件和热评文章小部件。</p>\n","excerpt":"<h3 id=\"给Hexo添加“上一篇”、“下一篇”导航\"><a href=\"#给Hexo添加“上一篇”、“下一篇”导航\" class=\"headerlink\" title=\"给Hexo添加“上一篇”、“下一篇”导航\"></a>给Hexo添加“上一篇”、“下一篇”导航</h3><p>我使用的是Hexo的默认主题light，该主题的文章页面没有提供“上一篇”和“下一篇”导航功能，而我又非常喜欢默认主题的清爽简洁，只能自己折腾了。<br>在Hexo官方文档中变量说明部分我们可以知道，在 Article (post, page, …) 中page.prev和page.next分别代表上一篇和下一篇文章，这两个变量都是一个page对象，所以通过page.prev.path和page.prev.title就可以获取到上一篇文章的相对路径和标题，然后通过修改/themes/light/layout/文件夹中的文件来实现我们的功能。<br>首先，在/themes/light/layout/_partial/post/文件夹中新建prev_next.ejs文件。<br>","more":"<br>prev_next.ejs<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% if (page.prev || page.next)&#123; %&gt;</div><div class=\"line\">&lt;div class=&quot;prev_next clearfix&quot;&gt;</div><div class=\"line\">  &lt;% if (page.prev)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- page.prev.path %&gt;&quot; class=&quot;alignleft prev&quot; title=&quot;&lt;%= page.prev.title %&gt;&quot;&gt;&lt;%= page.prev.title %&gt;&lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">  &lt;% if (page.next)&#123; %&gt;</div><div class=\"line\">    &lt;a href=&quot;&lt;%- config.root %&gt;&lt;%- page.next.path %&gt;&quot; class=&quot;alignright next&quot; title=&quot;&lt;%= page.next.title %&gt;&quot;&gt;&lt;%= page.next.title %&gt;&lt;/a&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后，修改/themes/light/layout/_partial/article.ejs文章模板，找到需要加入“上一篇”和“下一篇”导航功能的位置，加上&lt;%- partial(‘post/prev_next’) %&gt;，比如这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">      &lt;% &#125; else &#123; %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/category&apos;) %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/tag&apos;) %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/share&apos;) %&gt;</div><div class=\"line\">        &lt;%- partial(&apos;post/prev_next&apos;) %&gt;</div><div class=\"line\">      &lt;% &#125; %&gt;</div><div class=\"line\">      &lt;div class=&quot;clearfix&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;/footer&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/article&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;%- partial(&apos;comment&apos;) %&gt;</div></pre></td></tr></table></figure></p>\n<p>最后，在/themes/light/source/css/_partial/article.styl文件末尾添加上相应的CSS。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">.prev_next</div><div class=\"line\">  margin 1em 0</div><div class=\"line\">  clear both</div><div class=\"line\">  overflow hidden</div><div class=\"line\">  a</div><div class=\"line\">    display block</div><div class=\"line\">    float left</div><div class=\"line\">    width 50%</div><div class=\"line\">    background #dbdbdb</div><div class=\"line\">    text-align center</div><div class=\"line\">    padding 0.4em 0</div><div class=\"line\">    color #1ba1e2</div><div class=\"line\">    transition background .45s color .45s</div><div class=\"line\">    &amp;:hover</div><div class=\"line\">      color #fafafa</div><div class=\"line\">      background #717171</div><div class=\"line\">    &amp;.prev::before</div><div class=\"line\">      content &quot;上一篇：&quot;</div><div class=\"line\">      padding-right 0.5em</div><div class=\"line\">    &amp;.next::before</div><div class=\"line\">      content &quot;下一篇：&quot;</div><div class=\"line\">      padding-right 0.5em</div></pre></td></tr></table></figure></p>\n<h3 id=\"给博客和文章添加keywords\"><a href=\"#给博客和文章添加keywords\" class=\"headerlink\" title=\"给博客和文章添加keywords\"></a>给博客和文章添加keywords</h3><hr>\n<p>默认情况下博客和文章是没有关键字的，可以安装如下方法修改。<br>首先，在博客配置文件/Hexo/_config.yml中添加keywords:字段，关键字以英文,分割，如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\"># Site</div><div class=\"line\">title: typeof this  #站点名</div><div class=\"line\">subtitle:    # 副标题</div><div class=\"line\">description: # 站点描述，搜索引擎</div><div class=\"line\">author: typeof</div><div class=\"line\">email: xxx@admin.com</div><div class=\"line\">language: zh-CN</div><div class=\"line\">keywords: Web,前端,JavaScript,html5,css3 # 博客关键字</div></pre></td></tr></table></figure></p>\n<p>然后，修改模板文件，我用的是light模板，修改/themes/light/layout/_partial/head.ejs<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">#删除下面这行</div><div class=\"line\">&lt;% if (page.keywords)&#123; %&gt;&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;&quot;&gt;&lt;% &#125; %&gt;</div><div class=\"line\">#增加以下内容</div><div class=\"line\">&lt;% if (page.keywords)&#123; %&gt;</div><div class=\"line\">&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= page.keywords %&gt;,&lt;%= config.keywords %&gt;&quot;&gt;</div><div class=\"line\">&lt;% &#125; else if (config.keywords)&#123; %&gt;</div><div class=\"line\">&lt;meta name=&quot;keywords&quot; content=&quot;&lt;%= config.keywords %&gt;&quot;&gt;</div><div class=\"line\">&lt;%&#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>简单说明一下：如果页面有关键字，则用页面的关键字加上配置文件里面的关键字，如果没有关键字，则用配置文件的关键字。<br>要给文章添加关键字，只需要在文章里面加入keywords:即可。也可以直接修改创建文章的模板/scaffolds/post.md，在最下面添加keywords:，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">title: &#123;&#123; title &#125;&#125;</div><div class=\"line\">date: &#123;&#123; date &#125;&#125;</div><div class=\"line\">updated: &#123;&#123; date &#125;&#125;</div><div class=\"line\">tags:</div><div class=\"line\">categories:</div><div class=\"line\">keywords:</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加自定义widget\"><a href=\"#添加自定义widget\" class=\"headerlink\" title=\"添加自定义widget\"></a>添加自定义widget</h3><hr>\n<p>添加widget的方法很简单，首先在/themes/light/layout/_widget/文件夹中创建widget文件your_widget.ejs，然后在主题配置文件中加载你的widget，下面通过创建一个友情链的widget来看看具体操作。<br>友情链接包含连接名称和连接地址两个属性，看到有的教程中把友情连接直接静态地写在widget中，修改起来不方便，所以要借助主题配置文件_config.yml和Hexo提供的访问配置文件的对象theme。<br>首先，在/themes/flight/_config.yml文件中添加如下节。</p>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接\"></a>友情链接</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - Hexo: http://hexo.io</div><div class=\"line\">  - Hexo Document: http://hexo.io/docs</div><div class=\"line\">  - github: https://github.com/</div><div class=\"line\">  - jQuery: http://jquery.com/</div></pre></td></tr></table></figure>\n<p>然后，在/themes/light/layout/_widget/文件夹中创建友情连接widget文件blogroll.ejs，内容可以这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.blogrolls &amp;&amp; theme.blogrolls.length &gt; 0) &#123; %&gt;</div><div class=\"line\">&lt;div class=&quot;widget tag&quot;&gt;</div><div class=\"line\">  &lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;blogroll&apos;) %&gt;&lt;/h3&gt;</div><div class=\"line\">  &lt;ul class=&quot;entry&quot;&gt;</div><div class=\"line\">  &lt;% theme.blogrolls.forEach(function(item)&#123; %&gt;</div><div class=\"line\">    &lt;%</div><div class=\"line\">      var description, linkURL</div><div class=\"line\">      for (var tmp in item) &#123;</div><div class=\"line\">        description = tmp;</div><div class=\"line\">        linkURL = item[tmp];</div><div class=\"line\">      &#125;</div><div class=\"line\">    %&gt;</div><div class=\"line\">    &lt;li&gt;&lt;a href=&quot;&lt;%- linkURL %&gt;&quot; target=&quot;_blank&quot;&gt;&lt;%= description %&gt;&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;% &#125;); %&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>最后，修改主题配置文件/themes/flight/_config.yml，在widgets下增加blogroll。如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">  - category</div><div class=\"line\">  - tag</div><div class=\"line\">  - recent_posts</div><div class=\"line\">  - blogroll</div></pre></td></tr></table></figure></p>\n<p>友情连接widget就创建好了，hexo server，在本地<a href=\"http://localhost:4000/查看效果吧！同样，我们可以使用此方法添加个人说明，微博秀等widget。\">http://localhost:4000/查看效果吧！同样，我们可以使用此方法添加个人说明，微博秀等widget。</a><br>添加最新评论widget<br>首先需要声明的是本屌用的是多说评论系统，所以最新评论widget也是利用多说提供的API来实现，上一节已经分享了怎么创建自定义的widget，现在我们按照上面的方法来一步一步实现该widget。<br>在/themes/light/layout/_widget/文件夹下创建最新评论小挂件recent_comments.ejs，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.duoshuo)&#123; %&gt;</div><div class=\"line\">&lt;div class=&quot;widget recent_comments&quot;&gt;</div><div class=\"line\">  &lt;h3 class=&quot;title&quot;&gt;&lt;%= __(&apos;recent_comments&apos;) %&gt;&lt;/h3&gt;</div><div class=\"line\">  &lt;ul class=&quot;entry ds-recent-comments&quot; data-num-items=&quot;5&quot; data-show-avatars=&quot;0&quot; data-show-title=&quot;1&quot; data-show-time=&quot;1&quot;&gt;&lt;/ul&gt;</div><div class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">  if(typeof duoshuoQuery === &apos;undefined&apos;)&#123;</div><div class=\"line\">    var duoshuoQuery = &#123;short_name:&quot;&lt;%- theme.duoshuo %&gt;&quot;&#125;;</div><div class=\"line\">    (function() &#123;</div><div class=\"line\">      var ds = document.createElement(&apos;script&apos;);</div><div class=\"line\">      ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class=\"line\">      ds.src = &apos;http://static.duoshuo.com/embed.js&apos;;</div><div class=\"line\">      ds.charset = &apos;UTF-8&apos;;</div><div class=\"line\">      (document.getElementsByTagName(&apos;head&apos;)[0]</div><div class=\"line\">      || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class=\"line\">    &#125;)();</div><div class=\"line\">  &#125;</div><div class=\"line\">  &lt;/script&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>简单说明，在每个页面中，如果使用多个多说控件，只需要添加一次多说js，所以这里有这样的判断if(typeof duoshuoQuery===’undefined’)，在需要用到多说的位置都加上这个判断，避免多次加载js文件；另外多说评论相关的参数：data-num-items显示的评论条数，data-show-avatars是否显示用户头像，data-show-title是否显示文章标题，data-show-time是否显示评论时间，具体参数说明可以参考多说官方说明文档，按照官方文档还可以添加多说最近访客小部件和热评文章小部件。</p>"},{"title":"Java语言实现的各种排序","keywords":["java","sort","java排序","插入排序","冒泡排序","选择排序","Shell排序","快速排序","归并排序","堆排序"],"date":"2014-10-08T16:00:00.000Z","_content":" 用Java语言实现的各种排序，包括插入排序、冒泡排序、选择排序、Shell排序、快速排序、归并排序、堆排序、SortUtil等。\n\n#### 插入排序\n```java\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\npublic class InsertSort implements SortUtil.Sort{\n\n    public void sort(int[] data) {\n        int temp;\n        for(int i=1;i<data.length;i++){\n            for(int j=i;(j>0)&&(data[j]<data[j-1]);j--){\n                SortUtil.swap(data,j,j-1);\n            }\n        }        \n    }\n\n}\n```\n<!-- more -->\n\n#### 冒泡排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class BubbleSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int temp;\n        for(int i=0;i<data.length;i++){\n            for(int j=data.length-1;j>i;j--){\n                if(data[j]<data[j-1]){\n                    SortUtil.swap(data,j,j-1);\n                }\n            }\n        }\n    }\n\n}\n```\n#### 选择排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class SelectionSort implements SortUtil.Sort {\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int temp;\n        for (int i = 0; i < data.length; i++) {\n            int lowIndex = i;\n            for (int j = data.length - 1; j > i; j--) {\n                if (data[j] < data[lowIndex]) {\n                    lowIndex = j;\n                }\n            }\n            SortUtil.swap(data,i,lowIndex);\n        }\n    }\n\n}\n```\n#### Shell排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class ShellSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        for(int i=data.length/2;i>2;i/=2){\n            for(int j=0;j<i;j++){\n                insertSort(data,j,i);\n            }\n        }\n        insertSort(data,0,1);\n    }\n\n    /**\n     * @param data\n     * @param j\n     * @param i\n     */\n    private void insertSort(int[] data, int start, int inc) {\n        int temp;\n        for(int i=start+inc;i<data.length;i+=inc){\n            for(int j=i;(j>=inc)&&(data[j]<data[j-inc]);j-=inc){\n                SortUtil.swap(data,j,j-inc);\n            }\n        }\n    }\n\n}\n```\n#### 快速排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class QuickSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        quickSort(data,0,data.length-1);        \n    }\n    private void quickSort(int[] data,int i,int j){\n        int pivotIndex=(i+j)/2;\n        //swap\n        SortUtil.swap(data,pivotIndex,j);\n         \n        int k=partition(data,i-1,j,data[j]);\n        SortUtil.swap(data,k,j);\n        if((k-i)>1) quickSort(data,i,k-1);\n        if((j-k)>1) quickSort(data,k+1,j);\n         \n    }\n    /**\n     * @param data\n     * @param i\n     * @param j\n     * @return\n     */\n    private int partition(int[] data, int l, int r,int pivot) {\n        do{\n           while(data[++l]<pivot);\n           while((r!=0)&&data[--r]>pivot);\n           SortUtil.swap(data,l,r);\n        }\n        while(l<r);\n        SortUtil.swap(data,l,r);        \n        return l;\n    }\n\n}\n```\n##### 改进后的快速排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class ImprovedQuickSort implements SortUtil.Sort {\n\n    private static int MAX_STACK_SIZE=4096;\n    private static int THRESHOLD=10;\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int[] stack=new int[MAX_STACK_SIZE];\n         \n        int top=-1;\n        int pivot;\n        int pivotIndex,l,r;\n        \n        stack[++top]=0;\n        stack[++top]=data.length-1;\n        \n        while(top>0){\n            int j=stack[top--];\n            int i=stack[top--];\n            \n            pivotIndex=(i+j)/2;\n            pivot=data[pivotIndex];\n            \n            SortUtil.swap(data,pivotIndex,j);\n            \n            //partition\n            l=i-1;\n            r=j;\n            do{\n                while(data[++l]<pivot);\n                while((r!=0)&&(data[--r]>pivot));\n                SortUtil.swap(data,l,r);\n            }\n            while(l<r);\n            SortUtil.swap(data,l,r);\n            SortUtil.swap(data,l,j);\n            \n            if((l-i)>THRESHOLD){\n                stack[++top]=i;\n                stack[++top]=l-1;\n            }\n            if((j-l)>THRESHOLD){\n                stack[++top]=l+1;\n                stack[++top]=j;\n            }\n            \n        }\n        //new InsertSort().sort(data);\n        insertSort(data);\n    }\n    /**\n     * @param data\n     */\n    private void insertSort(int[] data) {\n        int temp;\n        for(int i=1;i<data.length;i++){\n            for(int j=i;(j>0)&&(data[j]<data[j-1]);j--){\n                SortUtil.swap(data,j,j-1);\n            }\n        }       \n    }\n\n}\n```\n#### 归并排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class MergeSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int[] temp=new int[data.length];\n        mergeSort(data,temp,0,data.length-1);\n    }\n     \n    private void mergeSort(int[] data,int[] temp,int l,int r){\n        int mid=(l+r)/2;\n        if(l==r) return ;\n        mergeSort(data,temp,l,mid);\n        mergeSort(data,temp,mid+1,r);\n        for(int i=l;i<=r;i++){\n            temp[i]=data[i];\n        }\n        int i1=l;\n        int i2=mid+1;\n        for(int cur=l;cur<=r;cur++){\n            if(i1==mid+1)\n                data[cur]=temp[i2++];\n            else if(i2>r)\n                data[cur]=temp[i1++];\n            else if(temp[i1]<temp[i2])\n                data[cur]=temp[i1++];\n            else\n                data[cur]=temp[i2++];            \n        }\n    }\n\n}\n```\n##### 改进后的归并排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class ImprovedMergeSort implements SortUtil.Sort {\n\n    private static final int THRESHOLD = 10;\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int[] temp=new int[data.length];\n        mergeSort(data,temp,0,data.length-1);\n    }\n\n    private void mergeSort(int[] data, int[] temp, int l, int r) {\n        int i, j, k;\n        int mid = (l + r) / 2;\n        if (l == r)\n            return;\n        if ((mid - l) >= THRESHOLD)\n            mergeSort(data, temp, l, mid);\n        else\n            insertSort(data, l, mid - l + 1);\n        if ((r - mid) > THRESHOLD)\n            mergeSort(data, temp, mid + 1, r);\n        else\n            insertSort(data, mid + 1, r - mid);\n\n        for (i = l; i <= mid; i++) {\n            temp[i] = data[i];\n        }\n        for (j = 1; j <= r - mid; j++) {\n            temp[r - j + 1] = data[j + mid];\n        }\n        int a = temp[l];\n        int b = temp[r];\n        for (i = l, j = r, k = l; k <= r; k++) {\n            if (a < b) {\n                data[k] = temp[i++];\n                a = temp[i];\n            } else {\n                data[k] = temp[j--];\n                b = temp[j];\n            }\n        }\n    }\n\n    /**\n     * @param data\n     * @param l\n     * @param i\n     */\n    private void insertSort(int[] data, int start, int len) {\n        for(int i=start+1;i<start+len;i++){\n            for(int j=i;(j>start) && data[j]<data[j-1];j--){\n                SortUtil.swap(data,j,j-1);\n            }\n        }\n    }\n}\n```\n#### 堆排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class HeapSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        MaxHeap h=new MaxHeap();\n        h.init(data);\n        for(int i=0;i<data.length;i++)\n            h.remove();\n        System.arraycopy(h.queue,1,data,0,data.length);\n    }\n\n     private static class MaxHeap{         \n         \n        void init(int[] data){\n            this.queue=new int[data.length+1];\n            for(int i=0;i<data.length;i++){\n                queue[++size]=data[i];\n                fixUp(size);\n            }\n        }\n         \n        private int size=0;\n\n        private int[] queue;\n                 \n        public int get() {\n            return queue[1];\n        }\n\n        public void remove() {\n            SortUtil.swap(queue,1,size--);\n            fixDown(1);\n        }\n        //fixdown\n        private void fixDown(int k) {\n            int j;\n            while ((j = k << 1) <= size) {\n                if (j < size && queue[j]<queue[j+1])\n                    j++; \n                if (queue[k]>queue[j]) //不用交换\n                    break;\n                SortUtil.swap(queue,j,k);\n                k = j;\n            }\n        }\n        private void fixUp(int k) {\n            while (k > 1) {\n                int j = k >> 1;\n                if (queue[j]>queue[k])\n                    break;\n                SortUtil.swap(queue,j,k);\n                k = j;\n            }\n        }\n\n    }\n\n}\n```\nSortUtil\n```\npackage org.rut.util.algorithm;\n\nimport org.rut.util.algorithm.support.BubbleSort;\nimport org.rut.util.algorithm.support.HeapSort;\nimport org.rut.util.algorithm.support.ImprovedMergeSort;\nimport org.rut.util.algorithm.support.ImprovedQuickSort;\nimport org.rut.util.algorithm.support.InsertSort;\nimport org.rut.util.algorithm.support.MergeSort;\nimport org.rut.util.algorithm.support.QuickSort;\nimport org.rut.util.algorithm.support.SelectionSort;\nimport org.rut.util.algorithm.support.ShellSort;\n\n\npublic class SortUtil {\n    public final static int INSERT = 1;\n    public final static int BUBBLE = 2;\n    public final static int SELECTION = 3;\n    public final static int SHELL = 4;\n    public final static int QUICK = 5;\n    public final static int IMPROVED_QUICK = 6;\n    public final static int MERGE = 7;\n    public final static int IMPROVED_MERGE = 8;\n    public final static int HEAP = 9;\n\n    public static void sort(int[] data) {\n        sort(data, IMPROVED_QUICK);\n    }\n    private static String[] name={\n            \"insert\", \"bubble\", \"selection\", \"shell\", \"quick\", \"improved_quick\", \"merge\", \"improved_merge\", \"heap\"\n    };\n     \n    private static Sort[] impl=new Sort[]{\n            new InsertSort(),\n            new BubbleSort(),\n            new SelectionSort(),\n            new ShellSort(),\n            new QuickSort(),\n            new ImprovedQuickSort(),\n            new MergeSort(),\n            new ImprovedMergeSort(),\n            new HeapSort()\n    };\n\n    public static String toString(int algorithm){\n        return name[algorithm-1];\n    }\n     \n    public static void sort(int[] data, int algorithm) {\n        impl[algorithm-1].sort(data);\n    }\n\n    public static interface Sort {\n        public void sort(int[] data);\n    }\n\n    public static void swap(int[] data, int i, int j) {\n        int temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n    }\n}\n```\n","source":"_posts/java_sort.md","raw":"---\ntitle: Java语言实现的各种排序\ncategory: Java\ntags: [Java,排序]\nkeywords: [java,sort,java排序,插入排序,冒泡排序,选择排序,Shell排序,快速排序,归并排序,堆排序]\ndate: 2014-10-09\n---\n 用Java语言实现的各种排序，包括插入排序、冒泡排序、选择排序、Shell排序、快速排序、归并排序、堆排序、SortUtil等。\n\n#### 插入排序\n```java\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\npublic class InsertSort implements SortUtil.Sort{\n\n    public void sort(int[] data) {\n        int temp;\n        for(int i=1;i<data.length;i++){\n            for(int j=i;(j>0)&&(data[j]<data[j-1]);j--){\n                SortUtil.swap(data,j,j-1);\n            }\n        }        \n    }\n\n}\n```\n<!-- more -->\n\n#### 冒泡排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class BubbleSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int temp;\n        for(int i=0;i<data.length;i++){\n            for(int j=data.length-1;j>i;j--){\n                if(data[j]<data[j-1]){\n                    SortUtil.swap(data,j,j-1);\n                }\n            }\n        }\n    }\n\n}\n```\n#### 选择排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class SelectionSort implements SortUtil.Sort {\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int temp;\n        for (int i = 0; i < data.length; i++) {\n            int lowIndex = i;\n            for (int j = data.length - 1; j > i; j--) {\n                if (data[j] < data[lowIndex]) {\n                    lowIndex = j;\n                }\n            }\n            SortUtil.swap(data,i,lowIndex);\n        }\n    }\n\n}\n```\n#### Shell排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class ShellSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        for(int i=data.length/2;i>2;i/=2){\n            for(int j=0;j<i;j++){\n                insertSort(data,j,i);\n            }\n        }\n        insertSort(data,0,1);\n    }\n\n    /**\n     * @param data\n     * @param j\n     * @param i\n     */\n    private void insertSort(int[] data, int start, int inc) {\n        int temp;\n        for(int i=start+inc;i<data.length;i+=inc){\n            for(int j=i;(j>=inc)&&(data[j]<data[j-inc]);j-=inc){\n                SortUtil.swap(data,j,j-inc);\n            }\n        }\n    }\n\n}\n```\n#### 快速排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class QuickSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        quickSort(data,0,data.length-1);        \n    }\n    private void quickSort(int[] data,int i,int j){\n        int pivotIndex=(i+j)/2;\n        //swap\n        SortUtil.swap(data,pivotIndex,j);\n         \n        int k=partition(data,i-1,j,data[j]);\n        SortUtil.swap(data,k,j);\n        if((k-i)>1) quickSort(data,i,k-1);\n        if((j-k)>1) quickSort(data,k+1,j);\n         \n    }\n    /**\n     * @param data\n     * @param i\n     * @param j\n     * @return\n     */\n    private int partition(int[] data, int l, int r,int pivot) {\n        do{\n           while(data[++l]<pivot);\n           while((r!=0)&&data[--r]>pivot);\n           SortUtil.swap(data,l,r);\n        }\n        while(l<r);\n        SortUtil.swap(data,l,r);        \n        return l;\n    }\n\n}\n```\n##### 改进后的快速排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class ImprovedQuickSort implements SortUtil.Sort {\n\n    private static int MAX_STACK_SIZE=4096;\n    private static int THRESHOLD=10;\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int[] stack=new int[MAX_STACK_SIZE];\n         \n        int top=-1;\n        int pivot;\n        int pivotIndex,l,r;\n        \n        stack[++top]=0;\n        stack[++top]=data.length-1;\n        \n        while(top>0){\n            int j=stack[top--];\n            int i=stack[top--];\n            \n            pivotIndex=(i+j)/2;\n            pivot=data[pivotIndex];\n            \n            SortUtil.swap(data,pivotIndex,j);\n            \n            //partition\n            l=i-1;\n            r=j;\n            do{\n                while(data[++l]<pivot);\n                while((r!=0)&&(data[--r]>pivot));\n                SortUtil.swap(data,l,r);\n            }\n            while(l<r);\n            SortUtil.swap(data,l,r);\n            SortUtil.swap(data,l,j);\n            \n            if((l-i)>THRESHOLD){\n                stack[++top]=i;\n                stack[++top]=l-1;\n            }\n            if((j-l)>THRESHOLD){\n                stack[++top]=l+1;\n                stack[++top]=j;\n            }\n            \n        }\n        //new InsertSort().sort(data);\n        insertSort(data);\n    }\n    /**\n     * @param data\n     */\n    private void insertSort(int[] data) {\n        int temp;\n        for(int i=1;i<data.length;i++){\n            for(int j=i;(j>0)&&(data[j]<data[j-1]);j--){\n                SortUtil.swap(data,j,j-1);\n            }\n        }       \n    }\n\n}\n```\n#### 归并排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class MergeSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int[] temp=new int[data.length];\n        mergeSort(data,temp,0,data.length-1);\n    }\n     \n    private void mergeSort(int[] data,int[] temp,int l,int r){\n        int mid=(l+r)/2;\n        if(l==r) return ;\n        mergeSort(data,temp,l,mid);\n        mergeSort(data,temp,mid+1,r);\n        for(int i=l;i<=r;i++){\n            temp[i]=data[i];\n        }\n        int i1=l;\n        int i2=mid+1;\n        for(int cur=l;cur<=r;cur++){\n            if(i1==mid+1)\n                data[cur]=temp[i2++];\n            else if(i2>r)\n                data[cur]=temp[i1++];\n            else if(temp[i1]<temp[i2])\n                data[cur]=temp[i1++];\n            else\n                data[cur]=temp[i2++];            \n        }\n    }\n\n}\n```\n##### 改进后的归并排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class ImprovedMergeSort implements SortUtil.Sort {\n\n    private static final int THRESHOLD = 10;\n\n    /*\n     * (non-Javadoc)\n     * \n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        int[] temp=new int[data.length];\n        mergeSort(data,temp,0,data.length-1);\n    }\n\n    private void mergeSort(int[] data, int[] temp, int l, int r) {\n        int i, j, k;\n        int mid = (l + r) / 2;\n        if (l == r)\n            return;\n        if ((mid - l) >= THRESHOLD)\n            mergeSort(data, temp, l, mid);\n        else\n            insertSort(data, l, mid - l + 1);\n        if ((r - mid) > THRESHOLD)\n            mergeSort(data, temp, mid + 1, r);\n        else\n            insertSort(data, mid + 1, r - mid);\n\n        for (i = l; i <= mid; i++) {\n            temp[i] = data[i];\n        }\n        for (j = 1; j <= r - mid; j++) {\n            temp[r - j + 1] = data[j + mid];\n        }\n        int a = temp[l];\n        int b = temp[r];\n        for (i = l, j = r, k = l; k <= r; k++) {\n            if (a < b) {\n                data[k] = temp[i++];\n                a = temp[i];\n            } else {\n                data[k] = temp[j--];\n                b = temp[j];\n            }\n        }\n    }\n\n    /**\n     * @param data\n     * @param l\n     * @param i\n     */\n    private void insertSort(int[] data, int start, int len) {\n        for(int i=start+1;i<start+len;i++){\n            for(int j=i;(j>start) && data[j]<data[j-1];j--){\n                SortUtil.swap(data,j,j-1);\n            }\n        }\n    }\n}\n```\n#### 堆排序\n```\npackage org.rut.util.algorithm.support;\n\nimport org.rut.util.algorithm.SortUtil;\n\n\npublic class HeapSort implements SortUtil.Sort{\n\n    /* (non-Javadoc)\n     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])\n     */\n    public void sort(int[] data) {\n        MaxHeap h=new MaxHeap();\n        h.init(data);\n        for(int i=0;i<data.length;i++)\n            h.remove();\n        System.arraycopy(h.queue,1,data,0,data.length);\n    }\n\n     private static class MaxHeap{         \n         \n        void init(int[] data){\n            this.queue=new int[data.length+1];\n            for(int i=0;i<data.length;i++){\n                queue[++size]=data[i];\n                fixUp(size);\n            }\n        }\n         \n        private int size=0;\n\n        private int[] queue;\n                 \n        public int get() {\n            return queue[1];\n        }\n\n        public void remove() {\n            SortUtil.swap(queue,1,size--);\n            fixDown(1);\n        }\n        //fixdown\n        private void fixDown(int k) {\n            int j;\n            while ((j = k << 1) <= size) {\n                if (j < size && queue[j]<queue[j+1])\n                    j++; \n                if (queue[k]>queue[j]) //不用交换\n                    break;\n                SortUtil.swap(queue,j,k);\n                k = j;\n            }\n        }\n        private void fixUp(int k) {\n            while (k > 1) {\n                int j = k >> 1;\n                if (queue[j]>queue[k])\n                    break;\n                SortUtil.swap(queue,j,k);\n                k = j;\n            }\n        }\n\n    }\n\n}\n```\nSortUtil\n```\npackage org.rut.util.algorithm;\n\nimport org.rut.util.algorithm.support.BubbleSort;\nimport org.rut.util.algorithm.support.HeapSort;\nimport org.rut.util.algorithm.support.ImprovedMergeSort;\nimport org.rut.util.algorithm.support.ImprovedQuickSort;\nimport org.rut.util.algorithm.support.InsertSort;\nimport org.rut.util.algorithm.support.MergeSort;\nimport org.rut.util.algorithm.support.QuickSort;\nimport org.rut.util.algorithm.support.SelectionSort;\nimport org.rut.util.algorithm.support.ShellSort;\n\n\npublic class SortUtil {\n    public final static int INSERT = 1;\n    public final static int BUBBLE = 2;\n    public final static int SELECTION = 3;\n    public final static int SHELL = 4;\n    public final static int QUICK = 5;\n    public final static int IMPROVED_QUICK = 6;\n    public final static int MERGE = 7;\n    public final static int IMPROVED_MERGE = 8;\n    public final static int HEAP = 9;\n\n    public static void sort(int[] data) {\n        sort(data, IMPROVED_QUICK);\n    }\n    private static String[] name={\n            \"insert\", \"bubble\", \"selection\", \"shell\", \"quick\", \"improved_quick\", \"merge\", \"improved_merge\", \"heap\"\n    };\n     \n    private static Sort[] impl=new Sort[]{\n            new InsertSort(),\n            new BubbleSort(),\n            new SelectionSort(),\n            new ShellSort(),\n            new QuickSort(),\n            new ImprovedQuickSort(),\n            new MergeSort(),\n            new ImprovedMergeSort(),\n            new HeapSort()\n    };\n\n    public static String toString(int algorithm){\n        return name[algorithm-1];\n    }\n     \n    public static void sort(int[] data, int algorithm) {\n        impl[algorithm-1].sort(data);\n    }\n\n    public static interface Sort {\n        public void sort(int[] data);\n    }\n\n    public static void swap(int[] data, int i, int j) {\n        int temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n    }\n}\n```\n","slug":"java_sort","published":1,"updated":"2016-09-08T10:35:10.370Z","_id":"cisu6ttgo0005o4bx8d2ujkaf","comments":1,"layout":"post","photos":[],"link":"","content":"<p> 用Java语言实现的各种排序，包括插入排序、冒泡排序、选择排序、Shell排序、快速排序、归并排序、堆排序、SortUtil等。</p>\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">SortUtil</span>.<span class=\"title\">Sort</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;data.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;(j&gt;<span class=\"number\">0</span>)&amp;&amp;(data[j]&lt;data[j-<span class=\"number\">1</span>]);j--)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-<span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class BubbleSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for(int i=0;i&lt;data.length;i++)&#123;</div><div class=\"line\">            for(int j=data.length-1;j&gt;i;j--)&#123;</div><div class=\"line\">                if(data[j]&lt;data[j-1])&#123;</div><div class=\"line\">                    SortUtil.swap(data,j,j-1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class SelectionSort implements SortUtil.Sort &#123;</div><div class=\"line\"></div><div class=\"line\">    /*</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * </div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for (int i = 0; i &lt; data.length; i++) &#123;</div><div class=\"line\">            int lowIndex = i;</div><div class=\"line\">            for (int j = data.length - 1; j &gt; i; j--) &#123;</div><div class=\"line\">                if (data[j] &lt; data[lowIndex]) &#123;</div><div class=\"line\">                    lowIndex = j;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            SortUtil.swap(data,i,lowIndex);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Shell排序\"><a href=\"#Shell排序\" class=\"headerlink\" title=\"Shell排序\"></a>Shell排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class ShellSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        for(int i=data.length/2;i&gt;2;i/=2)&#123;</div><div class=\"line\">            for(int j=0;j&lt;i;j++)&#123;</div><div class=\"line\">                insertSort(data,j,i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        insertSort(data,0,1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     * @param j</div><div class=\"line\">     * @param i</div><div class=\"line\">     */</div><div class=\"line\">    private void insertSort(int[] data, int start, int inc) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for(int i=start+inc;i&lt;data.length;i+=inc)&#123;</div><div class=\"line\">            for(int j=i;(j&gt;=inc)&amp;&amp;(data[j]&lt;data[j-inc]);j-=inc)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-inc);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class QuickSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        quickSort(data,0,data.length-1);        </div><div class=\"line\">    &#125;</div><div class=\"line\">    private void quickSort(int[] data,int i,int j)&#123;</div><div class=\"line\">        int pivotIndex=(i+j)/2;</div><div class=\"line\">        //swap</div><div class=\"line\">        SortUtil.swap(data,pivotIndex,j);</div><div class=\"line\">         </div><div class=\"line\">        int k=partition(data,i-1,j,data[j]);</div><div class=\"line\">        SortUtil.swap(data,k,j);</div><div class=\"line\">        if((k-i)&gt;1) quickSort(data,i,k-1);</div><div class=\"line\">        if((j-k)&gt;1) quickSort(data,k+1,j);</div><div class=\"line\">         </div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     * @param i</div><div class=\"line\">     * @param j</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    private int partition(int[] data, int l, int r,int pivot) &#123;</div><div class=\"line\">        do&#123;</div><div class=\"line\">           while(data[++l]&lt;pivot);</div><div class=\"line\">           while((r!=0)&amp;&amp;data[--r]&gt;pivot);</div><div class=\"line\">           SortUtil.swap(data,l,r);</div><div class=\"line\">        &#125;</div><div class=\"line\">        while(l&lt;r);</div><div class=\"line\">        SortUtil.swap(data,l,r);        </div><div class=\"line\">        return l;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"改进后的快速排序\"><a href=\"#改进后的快速排序\" class=\"headerlink\" title=\"改进后的快速排序\"></a>改进后的快速排序</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class ImprovedQuickSort implements SortUtil.Sort &#123;</div><div class=\"line\"></div><div class=\"line\">    private static int MAX_STACK_SIZE=4096;</div><div class=\"line\">    private static int THRESHOLD=10;</div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int[] stack=new int[MAX_STACK_SIZE];</div><div class=\"line\">         </div><div class=\"line\">        int top=-1;</div><div class=\"line\">        int pivot;</div><div class=\"line\">        int pivotIndex,l,r;</div><div class=\"line\">        </div><div class=\"line\">        stack[++top]=0;</div><div class=\"line\">        stack[++top]=data.length-1;</div><div class=\"line\">        </div><div class=\"line\">        while(top&gt;0)&#123;</div><div class=\"line\">            int j=stack[top--];</div><div class=\"line\">            int i=stack[top--];</div><div class=\"line\">            </div><div class=\"line\">            pivotIndex=(i+j)/2;</div><div class=\"line\">            pivot=data[pivotIndex];</div><div class=\"line\">            </div><div class=\"line\">            SortUtil.swap(data,pivotIndex,j);</div><div class=\"line\">            </div><div class=\"line\">            //partition</div><div class=\"line\">            l=i-1;</div><div class=\"line\">            r=j;</div><div class=\"line\">            do&#123;</div><div class=\"line\">                while(data[++l]&lt;pivot);</div><div class=\"line\">                while((r!=0)&amp;&amp;(data[--r]&gt;pivot));</div><div class=\"line\">                SortUtil.swap(data,l,r);</div><div class=\"line\">            &#125;</div><div class=\"line\">            while(l&lt;r);</div><div class=\"line\">            SortUtil.swap(data,l,r);</div><div class=\"line\">            SortUtil.swap(data,l,j);</div><div class=\"line\">            </div><div class=\"line\">            if((l-i)&gt;THRESHOLD)&#123;</div><div class=\"line\">                stack[++top]=i;</div><div class=\"line\">                stack[++top]=l-1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if((j-l)&gt;THRESHOLD)&#123;</div><div class=\"line\">                stack[++top]=l+1;</div><div class=\"line\">                stack[++top]=j;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        //new InsertSort().sort(data);</div><div class=\"line\">        insertSort(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     */</div><div class=\"line\">    private void insertSort(int[] data) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for(int i=1;i&lt;data.length;i++)&#123;</div><div class=\"line\">            for(int j=i;(j&gt;0)&amp;&amp;(data[j]&lt;data[j-1]);j--)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;       </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MergeSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int[] temp=new int[data.length];</div><div class=\"line\">        mergeSort(data,temp,0,data.length-1);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    private void mergeSort(int[] data,int[] temp,int l,int r)&#123;</div><div class=\"line\">        int mid=(l+r)/2;</div><div class=\"line\">        if(l==r) return ;</div><div class=\"line\">        mergeSort(data,temp,l,mid);</div><div class=\"line\">        mergeSort(data,temp,mid+1,r);</div><div class=\"line\">        for(int i=l;i&lt;=r;i++)&#123;</div><div class=\"line\">            temp[i]=data[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        int i1=l;</div><div class=\"line\">        int i2=mid+1;</div><div class=\"line\">        for(int cur=l;cur&lt;=r;cur++)&#123;</div><div class=\"line\">            if(i1==mid+1)</div><div class=\"line\">                data[cur]=temp[i2++];</div><div class=\"line\">            else if(i2&gt;r)</div><div class=\"line\">                data[cur]=temp[i1++];</div><div class=\"line\">            else if(temp[i1]&lt;temp[i2])</div><div class=\"line\">                data[cur]=temp[i1++];</div><div class=\"line\">            else</div><div class=\"line\">                data[cur]=temp[i2++];            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"改进后的归并排序\"><a href=\"#改进后的归并排序\" class=\"headerlink\" title=\"改进后的归并排序\"></a>改进后的归并排序</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class ImprovedMergeSort implements SortUtil.Sort &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final int THRESHOLD = 10;</div><div class=\"line\"></div><div class=\"line\">    /*</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * </div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int[] temp=new int[data.length];</div><div class=\"line\">        mergeSort(data,temp,0,data.length-1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void mergeSort(int[] data, int[] temp, int l, int r) &#123;</div><div class=\"line\">        int i, j, k;</div><div class=\"line\">        int mid = (l + r) / 2;</div><div class=\"line\">        if (l == r)</div><div class=\"line\">            return;</div><div class=\"line\">        if ((mid - l) &gt;= THRESHOLD)</div><div class=\"line\">            mergeSort(data, temp, l, mid);</div><div class=\"line\">        else</div><div class=\"line\">            insertSort(data, l, mid - l + 1);</div><div class=\"line\">        if ((r - mid) &gt; THRESHOLD)</div><div class=\"line\">            mergeSort(data, temp, mid + 1, r);</div><div class=\"line\">        else</div><div class=\"line\">            insertSort(data, mid + 1, r - mid);</div><div class=\"line\"></div><div class=\"line\">        for (i = l; i &lt;= mid; i++) &#123;</div><div class=\"line\">            temp[i] = data[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (j = 1; j &lt;= r - mid; j++) &#123;</div><div class=\"line\">            temp[r - j + 1] = data[j + mid];</div><div class=\"line\">        &#125;</div><div class=\"line\">        int a = temp[l];</div><div class=\"line\">        int b = temp[r];</div><div class=\"line\">        for (i = l, j = r, k = l; k &lt;= r; k++) &#123;</div><div class=\"line\">            if (a &lt; b) &#123;</div><div class=\"line\">                data[k] = temp[i++];</div><div class=\"line\">                a = temp[i];</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                data[k] = temp[j--];</div><div class=\"line\">                b = temp[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     * @param l</div><div class=\"line\">     * @param i</div><div class=\"line\">     */</div><div class=\"line\">    private void insertSort(int[] data, int start, int len) &#123;</div><div class=\"line\">        for(int i=start+1;i&lt;start+len;i++)&#123;</div><div class=\"line\">            for(int j=i;(j&gt;start) &amp;&amp; data[j]&lt;data[j-1];j--)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class HeapSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        MaxHeap h=new MaxHeap();</div><div class=\"line\">        h.init(data);</div><div class=\"line\">        for(int i=0;i&lt;data.length;i++)</div><div class=\"line\">            h.remove();</div><div class=\"line\">        System.arraycopy(h.queue,1,data,0,data.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     private static class MaxHeap&#123;         </div><div class=\"line\">         </div><div class=\"line\">        void init(int[] data)&#123;</div><div class=\"line\">            this.queue=new int[data.length+1];</div><div class=\"line\">            for(int i=0;i&lt;data.length;i++)&#123;</div><div class=\"line\">                queue[++size]=data[i];</div><div class=\"line\">                fixUp(size);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        private int size=0;</div><div class=\"line\"></div><div class=\"line\">        private int[] queue;</div><div class=\"line\">                 </div><div class=\"line\">        public int get() &#123;</div><div class=\"line\">            return queue[1];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void remove() &#123;</div><div class=\"line\">            SortUtil.swap(queue,1,size--);</div><div class=\"line\">            fixDown(1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        //fixdown</div><div class=\"line\">        private void fixDown(int k) &#123;</div><div class=\"line\">            int j;</div><div class=\"line\">            while ((j = k &lt;&lt; 1) &lt;= size) &#123;</div><div class=\"line\">                if (j &lt; size &amp;&amp; queue[j]&lt;queue[j+1])</div><div class=\"line\">                    j++; </div><div class=\"line\">                if (queue[k]&gt;queue[j]) //不用交换</div><div class=\"line\">                    break;</div><div class=\"line\">                SortUtil.swap(queue,j,k);</div><div class=\"line\">                k = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        private void fixUp(int k) &#123;</div><div class=\"line\">            while (k &gt; 1) &#123;</div><div class=\"line\">                int j = k &gt;&gt; 1;</div><div class=\"line\">                if (queue[j]&gt;queue[k])</div><div class=\"line\">                    break;</div><div class=\"line\">                SortUtil.swap(queue,j,k);</div><div class=\"line\">                k = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SortUtil<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.support.BubbleSort;</div><div class=\"line\">import org.rut.util.algorithm.support.HeapSort;</div><div class=\"line\">import org.rut.util.algorithm.support.ImprovedMergeSort;</div><div class=\"line\">import org.rut.util.algorithm.support.ImprovedQuickSort;</div><div class=\"line\">import org.rut.util.algorithm.support.InsertSort;</div><div class=\"line\">import org.rut.util.algorithm.support.MergeSort;</div><div class=\"line\">import org.rut.util.algorithm.support.QuickSort;</div><div class=\"line\">import org.rut.util.algorithm.support.SelectionSort;</div><div class=\"line\">import org.rut.util.algorithm.support.ShellSort;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class SortUtil &#123;</div><div class=\"line\">    public final static int INSERT = 1;</div><div class=\"line\">    public final static int BUBBLE = 2;</div><div class=\"line\">    public final static int SELECTION = 3;</div><div class=\"line\">    public final static int SHELL = 4;</div><div class=\"line\">    public final static int QUICK = 5;</div><div class=\"line\">    public final static int IMPROVED_QUICK = 6;</div><div class=\"line\">    public final static int MERGE = 7;</div><div class=\"line\">    public final static int IMPROVED_MERGE = 8;</div><div class=\"line\">    public final static int HEAP = 9;</div><div class=\"line\"></div><div class=\"line\">    public static void sort(int[] data) &#123;</div><div class=\"line\">        sort(data, IMPROVED_QUICK);</div><div class=\"line\">    &#125;</div><div class=\"line\">    private static String[] name=&#123;</div><div class=\"line\">            &quot;insert&quot;, &quot;bubble&quot;, &quot;selection&quot;, &quot;shell&quot;, &quot;quick&quot;, &quot;improved_quick&quot;, &quot;merge&quot;, &quot;improved_merge&quot;, &quot;heap&quot;</div><div class=\"line\">    &#125;;</div><div class=\"line\">     </div><div class=\"line\">    private static Sort[] impl=new Sort[]&#123;</div><div class=\"line\">            new InsertSort(),</div><div class=\"line\">            new BubbleSort(),</div><div class=\"line\">            new SelectionSort(),</div><div class=\"line\">            new ShellSort(),</div><div class=\"line\">            new QuickSort(),</div><div class=\"line\">            new ImprovedQuickSort(),</div><div class=\"line\">            new MergeSort(),</div><div class=\"line\">            new ImprovedMergeSort(),</div><div class=\"line\">            new HeapSort()</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    public static String toString(int algorithm)&#123;</div><div class=\"line\">        return name[algorithm-1];</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    public static void sort(int[] data, int algorithm) &#123;</div><div class=\"line\">        impl[algorithm-1].sort(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static interface Sort &#123;</div><div class=\"line\">        public void sort(int[] data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void swap(int[] data, int i, int j) &#123;</div><div class=\"line\">        int temp = data[i];</div><div class=\"line\">        data[i] = data[j];</div><div class=\"line\">        data[j] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p> 用Java语言实现的各种排序，包括插入排序、冒泡排序、选择排序、Shell排序、快速排序、归并排序、堆排序、SortUtil等。</p>\n<h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertSort</span> <span class=\"keyword\">implements</span> <span class=\"title\">SortUtil</span>.<span class=\"title\">Sort</span></span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">sort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] data)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> temp;</div><div class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;data.length;i++)&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i;(j&gt;<span class=\"number\">0</span>)&amp;&amp;(data[j]&lt;data[j-<span class=\"number\">1</span>]);j--)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-<span class=\"number\">1</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;        </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class BubbleSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for(int i=0;i&lt;data.length;i++)&#123;</div><div class=\"line\">            for(int j=data.length-1;j&gt;i;j--)&#123;</div><div class=\"line\">                if(data[j]&lt;data[j-1])&#123;</div><div class=\"line\">                    SortUtil.swap(data,j,j-1);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class SelectionSort implements SortUtil.Sort &#123;</div><div class=\"line\"></div><div class=\"line\">    /*</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * </div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for (int i = 0; i &lt; data.length; i++) &#123;</div><div class=\"line\">            int lowIndex = i;</div><div class=\"line\">            for (int j = data.length - 1; j &gt; i; j--) &#123;</div><div class=\"line\">                if (data[j] &lt; data[lowIndex]) &#123;</div><div class=\"line\">                    lowIndex = j;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            SortUtil.swap(data,i,lowIndex);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Shell排序\"><a href=\"#Shell排序\" class=\"headerlink\" title=\"Shell排序\"></a>Shell排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class ShellSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        for(int i=data.length/2;i&gt;2;i/=2)&#123;</div><div class=\"line\">            for(int j=0;j&lt;i;j++)&#123;</div><div class=\"line\">                insertSort(data,j,i);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        insertSort(data,0,1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     * @param j</div><div class=\"line\">     * @param i</div><div class=\"line\">     */</div><div class=\"line\">    private void insertSort(int[] data, int start, int inc) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for(int i=start+inc;i&lt;data.length;i+=inc)&#123;</div><div class=\"line\">            for(int j=i;(j&gt;=inc)&amp;&amp;(data[j]&lt;data[j-inc]);j-=inc)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-inc);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class QuickSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        quickSort(data,0,data.length-1);        </div><div class=\"line\">    &#125;</div><div class=\"line\">    private void quickSort(int[] data,int i,int j)&#123;</div><div class=\"line\">        int pivotIndex=(i+j)/2;</div><div class=\"line\">        //swap</div><div class=\"line\">        SortUtil.swap(data,pivotIndex,j);</div><div class=\"line\">         </div><div class=\"line\">        int k=partition(data,i-1,j,data[j]);</div><div class=\"line\">        SortUtil.swap(data,k,j);</div><div class=\"line\">        if((k-i)&gt;1) quickSort(data,i,k-1);</div><div class=\"line\">        if((j-k)&gt;1) quickSort(data,k+1,j);</div><div class=\"line\">         </div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     * @param i</div><div class=\"line\">     * @param j</div><div class=\"line\">     * @return</div><div class=\"line\">     */</div><div class=\"line\">    private int partition(int[] data, int l, int r,int pivot) &#123;</div><div class=\"line\">        do&#123;</div><div class=\"line\">           while(data[++l]&lt;pivot);</div><div class=\"line\">           while((r!=0)&amp;&amp;data[--r]&gt;pivot);</div><div class=\"line\">           SortUtil.swap(data,l,r);</div><div class=\"line\">        &#125;</div><div class=\"line\">        while(l&lt;r);</div><div class=\"line\">        SortUtil.swap(data,l,r);        </div><div class=\"line\">        return l;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"改进后的快速排序\"><a href=\"#改进后的快速排序\" class=\"headerlink\" title=\"改进后的快速排序\"></a>改进后的快速排序</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class ImprovedQuickSort implements SortUtil.Sort &#123;</div><div class=\"line\"></div><div class=\"line\">    private static int MAX_STACK_SIZE=4096;</div><div class=\"line\">    private static int THRESHOLD=10;</div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int[] stack=new int[MAX_STACK_SIZE];</div><div class=\"line\">         </div><div class=\"line\">        int top=-1;</div><div class=\"line\">        int pivot;</div><div class=\"line\">        int pivotIndex,l,r;</div><div class=\"line\">        </div><div class=\"line\">        stack[++top]=0;</div><div class=\"line\">        stack[++top]=data.length-1;</div><div class=\"line\">        </div><div class=\"line\">        while(top&gt;0)&#123;</div><div class=\"line\">            int j=stack[top--];</div><div class=\"line\">            int i=stack[top--];</div><div class=\"line\">            </div><div class=\"line\">            pivotIndex=(i+j)/2;</div><div class=\"line\">            pivot=data[pivotIndex];</div><div class=\"line\">            </div><div class=\"line\">            SortUtil.swap(data,pivotIndex,j);</div><div class=\"line\">            </div><div class=\"line\">            //partition</div><div class=\"line\">            l=i-1;</div><div class=\"line\">            r=j;</div><div class=\"line\">            do&#123;</div><div class=\"line\">                while(data[++l]&lt;pivot);</div><div class=\"line\">                while((r!=0)&amp;&amp;(data[--r]&gt;pivot));</div><div class=\"line\">                SortUtil.swap(data,l,r);</div><div class=\"line\">            &#125;</div><div class=\"line\">            while(l&lt;r);</div><div class=\"line\">            SortUtil.swap(data,l,r);</div><div class=\"line\">            SortUtil.swap(data,l,j);</div><div class=\"line\">            </div><div class=\"line\">            if((l-i)&gt;THRESHOLD)&#123;</div><div class=\"line\">                stack[++top]=i;</div><div class=\"line\">                stack[++top]=l-1;</div><div class=\"line\">            &#125;</div><div class=\"line\">            if((j-l)&gt;THRESHOLD)&#123;</div><div class=\"line\">                stack[++top]=l+1;</div><div class=\"line\">                stack[++top]=j;</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;</div><div class=\"line\">        //new InsertSort().sort(data);</div><div class=\"line\">        insertSort(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     */</div><div class=\"line\">    private void insertSort(int[] data) &#123;</div><div class=\"line\">        int temp;</div><div class=\"line\">        for(int i=1;i&lt;data.length;i++)&#123;</div><div class=\"line\">            for(int j=i;(j&gt;0)&amp;&amp;(data[j]&lt;data[j-1]);j--)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;       </div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class MergeSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int[] temp=new int[data.length];</div><div class=\"line\">        mergeSort(data,temp,0,data.length-1);</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    private void mergeSort(int[] data,int[] temp,int l,int r)&#123;</div><div class=\"line\">        int mid=(l+r)/2;</div><div class=\"line\">        if(l==r) return ;</div><div class=\"line\">        mergeSort(data,temp,l,mid);</div><div class=\"line\">        mergeSort(data,temp,mid+1,r);</div><div class=\"line\">        for(int i=l;i&lt;=r;i++)&#123;</div><div class=\"line\">            temp[i]=data[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        int i1=l;</div><div class=\"line\">        int i2=mid+1;</div><div class=\"line\">        for(int cur=l;cur&lt;=r;cur++)&#123;</div><div class=\"line\">            if(i1==mid+1)</div><div class=\"line\">                data[cur]=temp[i2++];</div><div class=\"line\">            else if(i2&gt;r)</div><div class=\"line\">                data[cur]=temp[i1++];</div><div class=\"line\">            else if(temp[i1]&lt;temp[i2])</div><div class=\"line\">                data[cur]=temp[i1++];</div><div class=\"line\">            else</div><div class=\"line\">                data[cur]=temp[i2++];            </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"改进后的归并排序\"><a href=\"#改进后的归并排序\" class=\"headerlink\" title=\"改进后的归并排序\"></a>改进后的归并排序</h5><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class ImprovedMergeSort implements SortUtil.Sort &#123;</div><div class=\"line\"></div><div class=\"line\">    private static final int THRESHOLD = 10;</div><div class=\"line\"></div><div class=\"line\">    /*</div><div class=\"line\">     * (non-Javadoc)</div><div class=\"line\">     * </div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        int[] temp=new int[data.length];</div><div class=\"line\">        mergeSort(data,temp,0,data.length-1);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    private void mergeSort(int[] data, int[] temp, int l, int r) &#123;</div><div class=\"line\">        int i, j, k;</div><div class=\"line\">        int mid = (l + r) / 2;</div><div class=\"line\">        if (l == r)</div><div class=\"line\">            return;</div><div class=\"line\">        if ((mid - l) &gt;= THRESHOLD)</div><div class=\"line\">            mergeSort(data, temp, l, mid);</div><div class=\"line\">        else</div><div class=\"line\">            insertSort(data, l, mid - l + 1);</div><div class=\"line\">        if ((r - mid) &gt; THRESHOLD)</div><div class=\"line\">            mergeSort(data, temp, mid + 1, r);</div><div class=\"line\">        else</div><div class=\"line\">            insertSort(data, mid + 1, r - mid);</div><div class=\"line\"></div><div class=\"line\">        for (i = l; i &lt;= mid; i++) &#123;</div><div class=\"line\">            temp[i] = data[i];</div><div class=\"line\">        &#125;</div><div class=\"line\">        for (j = 1; j &lt;= r - mid; j++) &#123;</div><div class=\"line\">            temp[r - j + 1] = data[j + mid];</div><div class=\"line\">        &#125;</div><div class=\"line\">        int a = temp[l];</div><div class=\"line\">        int b = temp[r];</div><div class=\"line\">        for (i = l, j = r, k = l; k &lt;= r; k++) &#123;</div><div class=\"line\">            if (a &lt; b) &#123;</div><div class=\"line\">                data[k] = temp[i++];</div><div class=\"line\">                a = temp[i];</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                data[k] = temp[j--];</div><div class=\"line\">                b = temp[j];</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    /**</div><div class=\"line\">     * @param data</div><div class=\"line\">     * @param l</div><div class=\"line\">     * @param i</div><div class=\"line\">     */</div><div class=\"line\">    private void insertSort(int[] data, int start, int len) &#123;</div><div class=\"line\">        for(int i=start+1;i&lt;start+len;i++)&#123;</div><div class=\"line\">            for(int j=i;(j&gt;start) &amp;&amp; data[j]&lt;data[j-1];j--)&#123;</div><div class=\"line\">                SortUtil.swap(data,j,j-1);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm.support;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.SortUtil;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class HeapSort implements SortUtil.Sort&#123;</div><div class=\"line\"></div><div class=\"line\">    /* (non-Javadoc)</div><div class=\"line\">     * @see org.rut.util.algorithm.SortUtil.Sort#sort(int[])</div><div class=\"line\">     */</div><div class=\"line\">    public void sort(int[] data) &#123;</div><div class=\"line\">        MaxHeap h=new MaxHeap();</div><div class=\"line\">        h.init(data);</div><div class=\"line\">        for(int i=0;i&lt;data.length;i++)</div><div class=\"line\">            h.remove();</div><div class=\"line\">        System.arraycopy(h.queue,1,data,0,data.length);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">     private static class MaxHeap&#123;         </div><div class=\"line\">         </div><div class=\"line\">        void init(int[] data)&#123;</div><div class=\"line\">            this.queue=new int[data.length+1];</div><div class=\"line\">            for(int i=0;i&lt;data.length;i++)&#123;</div><div class=\"line\">                queue[++size]=data[i];</div><div class=\"line\">                fixUp(size);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">         </div><div class=\"line\">        private int size=0;</div><div class=\"line\"></div><div class=\"line\">        private int[] queue;</div><div class=\"line\">                 </div><div class=\"line\">        public int get() &#123;</div><div class=\"line\">            return queue[1];</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        public void remove() &#123;</div><div class=\"line\">            SortUtil.swap(queue,1,size--);</div><div class=\"line\">            fixDown(1);</div><div class=\"line\">        &#125;</div><div class=\"line\">        //fixdown</div><div class=\"line\">        private void fixDown(int k) &#123;</div><div class=\"line\">            int j;</div><div class=\"line\">            while ((j = k &lt;&lt; 1) &lt;= size) &#123;</div><div class=\"line\">                if (j &lt; size &amp;&amp; queue[j]&lt;queue[j+1])</div><div class=\"line\">                    j++; </div><div class=\"line\">                if (queue[k]&gt;queue[j]) //不用交换</div><div class=\"line\">                    break;</div><div class=\"line\">                SortUtil.swap(queue,j,k);</div><div class=\"line\">                k = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        private void fixUp(int k) &#123;</div><div class=\"line\">            while (k &gt; 1) &#123;</div><div class=\"line\">                int j = k &gt;&gt; 1;</div><div class=\"line\">                if (queue[j]&gt;queue[k])</div><div class=\"line\">                    break;</div><div class=\"line\">                SortUtil.swap(queue,j,k);</div><div class=\"line\">                k = j;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>SortUtil<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">package org.rut.util.algorithm;</div><div class=\"line\"></div><div class=\"line\">import org.rut.util.algorithm.support.BubbleSort;</div><div class=\"line\">import org.rut.util.algorithm.support.HeapSort;</div><div class=\"line\">import org.rut.util.algorithm.support.ImprovedMergeSort;</div><div class=\"line\">import org.rut.util.algorithm.support.ImprovedQuickSort;</div><div class=\"line\">import org.rut.util.algorithm.support.InsertSort;</div><div class=\"line\">import org.rut.util.algorithm.support.MergeSort;</div><div class=\"line\">import org.rut.util.algorithm.support.QuickSort;</div><div class=\"line\">import org.rut.util.algorithm.support.SelectionSort;</div><div class=\"line\">import org.rut.util.algorithm.support.ShellSort;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">public class SortUtil &#123;</div><div class=\"line\">    public final static int INSERT = 1;</div><div class=\"line\">    public final static int BUBBLE = 2;</div><div class=\"line\">    public final static int SELECTION = 3;</div><div class=\"line\">    public final static int SHELL = 4;</div><div class=\"line\">    public final static int QUICK = 5;</div><div class=\"line\">    public final static int IMPROVED_QUICK = 6;</div><div class=\"line\">    public final static int MERGE = 7;</div><div class=\"line\">    public final static int IMPROVED_MERGE = 8;</div><div class=\"line\">    public final static int HEAP = 9;</div><div class=\"line\"></div><div class=\"line\">    public static void sort(int[] data) &#123;</div><div class=\"line\">        sort(data, IMPROVED_QUICK);</div><div class=\"line\">    &#125;</div><div class=\"line\">    private static String[] name=&#123;</div><div class=\"line\">            &quot;insert&quot;, &quot;bubble&quot;, &quot;selection&quot;, &quot;shell&quot;, &quot;quick&quot;, &quot;improved_quick&quot;, &quot;merge&quot;, &quot;improved_merge&quot;, &quot;heap&quot;</div><div class=\"line\">    &#125;;</div><div class=\"line\">     </div><div class=\"line\">    private static Sort[] impl=new Sort[]&#123;</div><div class=\"line\">            new InsertSort(),</div><div class=\"line\">            new BubbleSort(),</div><div class=\"line\">            new SelectionSort(),</div><div class=\"line\">            new ShellSort(),</div><div class=\"line\">            new QuickSort(),</div><div class=\"line\">            new ImprovedQuickSort(),</div><div class=\"line\">            new MergeSort(),</div><div class=\"line\">            new ImprovedMergeSort(),</div><div class=\"line\">            new HeapSort()</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    public static String toString(int algorithm)&#123;</div><div class=\"line\">        return name[algorithm-1];</div><div class=\"line\">    &#125;</div><div class=\"line\">     </div><div class=\"line\">    public static void sort(int[] data, int algorithm) &#123;</div><div class=\"line\">        impl[algorithm-1].sort(data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static interface Sort &#123;</div><div class=\"line\">        public void sort(int[] data);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    public static void swap(int[] data, int i, int j) &#123;</div><div class=\"line\">        int temp = data[i];</div><div class=\"line\">        data[i] = data[j];</div><div class=\"line\">        data[j] = temp;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Linux域名解析","date":"2014-09-30T16:00:00.000Z","comments":1,"_content":"## 解析域名3个关键文件：\n```\n/etc/hosts\n/etc/resolv.conf\n/etc/nsswitch.conf\n```\n<!-- more -->\n### nsswitch.conf 与系统获取解析的顺序\n```\n/home/was$ vi /etc/nsswitch.conf\n #找到hosts关键字\n #hosts:     db files nisplus nis dns\n hosts:      files dns  #此为默认配置\n```\n### resolv.conf 域名解析服务器配置\n```\n/home/was$ more /etc/resolv.conf\n# Generated by NetworkManager\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n```\n### hosts本地映射地址\n\n和Windows系统(C:\\Windows\\System32\\drivers\\etc\\hosts)下的host的文件相类似，就是一个文本文件，里面存放一些IP和域名的对应关系\n```\n/home/was$more /etc/hosts\n127.0.0.1   localhost\n#223.252.198.111 api.yixin.im\n```\n\n### 测试易信接口域名解析\n\n```sh\n/home/was$ dig @114.114.114.114 api.yixin.im\n; <<>> DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6 <<>> @114.114.114.114 api.yixin.im\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 18824\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;api.yixin.im.                  IN      A\n\n;; ANSWER SECTION:\napi.yixin.im.           124     IN      A       223.252.199.8\n\n;; Query time: 6 msec\n;; SERVER: 114.114.114.114#53(114.114.114.114)\n;; WHEN: Tue Aug 30 16:52:07 2016\n;; MSG SIZE  rcvd: 46\n```","source":"_posts/linux-dns.md","raw":"---\ntitle: Linux域名解析\ncategory: linux\ntags: [linux,dns]\ndate: 2014-10-01\ncomments: true\n---\n## 解析域名3个关键文件：\n```\n/etc/hosts\n/etc/resolv.conf\n/etc/nsswitch.conf\n```\n<!-- more -->\n### nsswitch.conf 与系统获取解析的顺序\n```\n/home/was$ vi /etc/nsswitch.conf\n #找到hosts关键字\n #hosts:     db files nisplus nis dns\n hosts:      files dns  #此为默认配置\n```\n### resolv.conf 域名解析服务器配置\n```\n/home/was$ more /etc/resolv.conf\n# Generated by NetworkManager\nnameserver 114.114.114.114\nnameserver 8.8.8.8\n```\n### hosts本地映射地址\n\n和Windows系统(C:\\Windows\\System32\\drivers\\etc\\hosts)下的host的文件相类似，就是一个文本文件，里面存放一些IP和域名的对应关系\n```\n/home/was$more /etc/hosts\n127.0.0.1   localhost\n#223.252.198.111 api.yixin.im\n```\n\n### 测试易信接口域名解析\n\n```sh\n/home/was$ dig @114.114.114.114 api.yixin.im\n; <<>> DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6 <<>> @114.114.114.114 api.yixin.im\n; (1 server found)\n;; global options: +cmd\n;; Got answer:\n;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 18824\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0\n\n;; QUESTION SECTION:\n;api.yixin.im.                  IN      A\n\n;; ANSWER SECTION:\napi.yixin.im.           124     IN      A       223.252.199.8\n\n;; Query time: 6 msec\n;; SERVER: 114.114.114.114#53(114.114.114.114)\n;; WHEN: Tue Aug 30 16:52:07 2016\n;; MSG SIZE  rcvd: 46\n```","slug":"linux-dns","published":1,"updated":"2016-09-08T07:41:00.626Z","layout":"post","photos":[],"link":"","_id":"cisu6ttgr0006o4bx1kydhem1","content":"<h2 id=\"解析域名3个关键文件：\"><a href=\"#解析域名3个关键文件：\" class=\"headerlink\" title=\"解析域名3个关键文件：\"></a>解析域名3个关键文件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/etc/hosts</div><div class=\"line\">/etc/resolv.conf</div><div class=\"line\">/etc/nsswitch.conf</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"nsswitch-conf-与系统获取解析的顺序\"><a href=\"#nsswitch-conf-与系统获取解析的顺序\" class=\"headerlink\" title=\"nsswitch.conf 与系统获取解析的顺序\"></a>nsswitch.conf 与系统获取解析的顺序</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$ vi /etc/nsswitch.conf</div><div class=\"line\"> #找到hosts关键字</div><div class=\"line\"> #hosts:     db files nisplus nis dns</div><div class=\"line\"> hosts:      files dns  #此为默认配置</div></pre></td></tr></table></figure>\n<h3 id=\"resolv-conf-域名解析服务器配置\"><a href=\"#resolv-conf-域名解析服务器配置\" class=\"headerlink\" title=\"resolv.conf 域名解析服务器配置\"></a>resolv.conf 域名解析服务器配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$ more /etc/resolv.conf</div><div class=\"line\"># Generated by NetworkManager</div><div class=\"line\">nameserver 114.114.114.114</div><div class=\"line\">nameserver 8.8.8.8</div></pre></td></tr></table></figure>\n<h3 id=\"hosts本地映射地址\"><a href=\"#hosts本地映射地址\" class=\"headerlink\" title=\"hosts本地映射地址\"></a>hosts本地映射地址</h3><p>和Windows系统(C:\\Windows\\System32\\drivers\\etc\\hosts)下的host的文件相类似，就是一个文本文件，里面存放一些IP和域名的对应关系<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$more /etc/hosts</div><div class=\"line\">127.0.0.1   localhost</div><div class=\"line\">#223.252.198.111 api.yixin.im</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试易信接口域名解析\"><a href=\"#测试易信接口域名解析\" class=\"headerlink\" title=\"测试易信接口域名解析\"></a>测试易信接口域名解析</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$ dig @114.114.114.114 api.yixin.im</div><div class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6 &lt;&lt;&gt;&gt; @114.114.114.114 api.yixin.im</div><div class=\"line\">; (1 server found)</div><div class=\"line\">;; global options: +cmd</div><div class=\"line\">;; Got answer:</div><div class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 18824</div><div class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</div><div class=\"line\"></div><div class=\"line\">;; QUESTION SECTION:</div><div class=\"line\">;api.yixin.im.                  IN      A</div><div class=\"line\"></div><div class=\"line\">;; ANSWER SECTION:</div><div class=\"line\">api.yixin.im.           124     IN      A       223.252.199.8</div><div class=\"line\"></div><div class=\"line\">;; Query time: 6 msec</div><div class=\"line\">;; SERVER: 114.114.114.114<span class=\"comment\">#53(114.114.114.114)</span></div><div class=\"line\">;; WHEN: Tue Aug 30 16:52:07 2016</div><div class=\"line\">;; MSG SIZE  rcvd: 46</div></pre></td></tr></table></figure>","excerpt":"<h2 id=\"解析域名3个关键文件：\"><a href=\"#解析域名3个关键文件：\" class=\"headerlink\" title=\"解析域名3个关键文件：\"></a>解析域名3个关键文件：</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/etc/hosts</div><div class=\"line\">/etc/resolv.conf</div><div class=\"line\">/etc/nsswitch.conf</div></pre></td></tr></table></figure>","more":"<h3 id=\"nsswitch-conf-与系统获取解析的顺序\"><a href=\"#nsswitch-conf-与系统获取解析的顺序\" class=\"headerlink\" title=\"nsswitch.conf 与系统获取解析的顺序\"></a>nsswitch.conf 与系统获取解析的顺序</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$ vi /etc/nsswitch.conf</div><div class=\"line\"> #找到hosts关键字</div><div class=\"line\"> #hosts:     db files nisplus nis dns</div><div class=\"line\"> hosts:      files dns  #此为默认配置</div></pre></td></tr></table></figure>\n<h3 id=\"resolv-conf-域名解析服务器配置\"><a href=\"#resolv-conf-域名解析服务器配置\" class=\"headerlink\" title=\"resolv.conf 域名解析服务器配置\"></a>resolv.conf 域名解析服务器配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$ more /etc/resolv.conf</div><div class=\"line\"># Generated by NetworkManager</div><div class=\"line\">nameserver 114.114.114.114</div><div class=\"line\">nameserver 8.8.8.8</div></pre></td></tr></table></figure>\n<h3 id=\"hosts本地映射地址\"><a href=\"#hosts本地映射地址\" class=\"headerlink\" title=\"hosts本地映射地址\"></a>hosts本地映射地址</h3><p>和Windows系统(C:\\Windows\\System32\\drivers\\etc\\hosts)下的host的文件相类似，就是一个文本文件，里面存放一些IP和域名的对应关系<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$more /etc/hosts</div><div class=\"line\">127.0.0.1   localhost</div><div class=\"line\">#223.252.198.111 api.yixin.im</div></pre></td></tr></table></figure></p>\n<h3 id=\"测试易信接口域名解析\"><a href=\"#测试易信接口域名解析\" class=\"headerlink\" title=\"测试易信接口域名解析\"></a>测试易信接口域名解析</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><div class=\"line\">/home/was$ dig @114.114.114.114 api.yixin.im</div><div class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.8.2rc1-RedHat-9.8.2-0.17.rc1.el6 &lt;&lt;&gt;&gt; @114.114.114.114 api.yixin.im</div><div class=\"line\">; (1 server found)</div><div class=\"line\">;; global options: +cmd</div><div class=\"line\">;; Got answer:</div><div class=\"line\">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 18824</div><div class=\"line\">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0</div><div class=\"line\"></div><div class=\"line\">;; QUESTION SECTION:</div><div class=\"line\">;api.yixin.im.                  IN      A</div><div class=\"line\"></div><div class=\"line\">;; ANSWER SECTION:</div><div class=\"line\">api.yixin.im.           124     IN      A       223.252.199.8</div><div class=\"line\"></div><div class=\"line\">;; Query time: 6 msec</div><div class=\"line\">;; SERVER: 114.114.114.114<span class=\"comment\">#53(114.114.114.114)</span></div><div class=\"line\">;; WHEN: Tue Aug 30 16:52:07 2016</div><div class=\"line\">;; MSG SIZE  rcvd: 46</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cisu6ttga0000o4bx1srx4h79","category_id":"cisu6ttgk0004o4bx8p5lnaa8","_id":"cisu6ttgz000ao4bxuzqtbc56"},{"post_id":"cisu6ttgg0002o4bxcwrzw901","category_id":"cisu6ttgk0004o4bx8p5lnaa8","_id":"cisu6tth0000co4bx4cywqubt"},{"post_id":"cisu6ttgo0005o4bx8d2ujkaf","category_id":"cisu6ttgz000bo4bx2vx1jnj1","_id":"cisu6tth3000ho4bxd2or76mk"},{"post_id":"cisu6ttgr0006o4bx1kydhem1","category_id":"cisu6tth2000eo4bxnlthtiks","_id":"cisu6tth4000jo4bx4m6qybz2"}],"PostTag":[{"post_id":"cisu6ttgo0005o4bx8d2ujkaf","tag_id":"cisu6ttgv0007o4bxc49e6vum","_id":"cisu6tth2000fo4bxpm57vshk"},{"post_id":"cisu6ttgo0005o4bx8d2ujkaf","tag_id":"cisu6ttgy0009o4bx5vdozlos","_id":"cisu6tth3000go4bx99c9lilr"},{"post_id":"cisu6ttgr0006o4bx1kydhem1","tag_id":"cisu6tth1000do4bxkp92y7my","_id":"cisu6tth5000ko4bxs70i50wu"},{"post_id":"cisu6ttgr0006o4bx1kydhem1","tag_id":"cisu6tth4000io4bx2e87k6fh","_id":"cisu6tth6000lo4bxz5bvc09c"}],"Tag":[{"name":"Java","_id":"cisu6ttgv0007o4bxc49e6vum"},{"name":"排序","_id":"cisu6ttgy0009o4bx5vdozlos"},{"name":"linux","_id":"cisu6tth1000do4bxkp92y7my"},{"name":"dns","_id":"cisu6tth4000io4bx2e87k6fh"}]}}